{
  "openapi": "3.0.3",
  "info": {
    "title": "Hetzner Cloud API",
    "description": "Copied from the official API documentation for the Public Hetzner Cloud.",
    "contact": {
      "url": "https://docs.hetzner.cloud/"
    },
    "version": "ddf156c-dirty"
  },
  "servers": [
    {
      "url": "https://api.hetzner.cloud/v1",
      "description": "Official production server"
    }
  ],
  "tags": [
    {
      "name": "actions",
      "description": "Actions show the results and progress of asynchronous requests to the API.\n"
    },
    {
      "name": "certificates",
      "description": "TLS/SSL Certificates prove the identity of a Server and are used to encrypt client traffic.\n"
    },
    {
      "name": "datacenters",
      "description": "Each Datacenter represents a _virtual_ Datacenter which is made up of possible many physical Datacenters where Servers are hosted.\n\nDatacenter names are composed from their Location and virtual Datacenter number, for example `fsn1-dc14` means virtual Datacenter `14` in Location `fsn1`.\n\nRight now there is only one Datacenter for each Location. The Datacenter numbers for `fsn`, `nbg` and `hel` are arbitrarily set to `14`, `3` and `2` for historic reasons and do not represent real physical Hetzner datacenters.\n"
    },
    {
      "name": "firewalls",
      "description": "Firewalls can limit the network access to or from your resources.\n\n- When applying a firewall with no `in` rule all inbound traffic will be dropped. The default for `in` is `DROP`.\n- When applying a firewall with no `out` rule all outbound traffic will be accepted. The default for `out` is `ACCEPT`.\n"
    },
    {
      "name": "floating_ips",
      "description": "Floating IPs help you to create highly available setups. You can assign a Floating IP to any Server. The Server can then use this IP. You can reassign it to a different Server at any time, or you can choose to unassign the IP from Servers all together.\n\nFloating IPs can be used globally. This means you can assign a Floating IP to a Server in one Location and later reassign it to a Server in a different Location. For optimal routing and latency Floating IPs should be used in the Location they were created in.\n\nFor Floating IPs to work with your Server, you must configure them inside your operation system.\n\nFloating IPs of type `ipv4` use a single IPv4 address as their `ip` property. Floating IPs of type `ipv6` use a /64 network such as `fc00::/64` as their `ip` property. Any IP address within that network can be used on your host.\n\nFloating IPs are billed on a monthly basis.\n"
    },
    {
      "name": "images",
      "description": "Images are blueprints for your VM disks. They can be of different types:\n\n### System Images\n\nDistribution Images maintained by us, e.g. “Ubuntu 20.04”\n\n### Snapshot Images\n\nMaintained by you, for example “Ubuntu 20.04 with my own settings”. These are billed per GB per month.\n\n### Backup Images\n\nDaily Backups of your Server. Will automatically be created for Servers which have backups enabled (`POST /servers/{id}/actions/enable_backup`)\n\nBound to exactly one Server. If you delete the Server, you also delete all backups bound to it. You may convert backup Images to snapshot Images to keep them.\n\nThese are billed at 20% of your instance price for 7 backup slots.\n\n### App Images\n\nPrebuild images with specific software configurations, e.g. “Wordpress”. All app images are created by us.\n"
    },
    {
      "name": "isos",
      "description": "ISOs are read-only Images of DVDs. While we recommend using our Image functionality to install your Servers we also provide some stock ISOs so you can install more exotic operating systems by yourself.\n\nOn request our support uploads a private ISO just for you. These are marked with type `private` and only visible in your Project.\n\nTo attach an ISO to your Server use `POST /servers/{id}/actions/attach_iso`.\n"
    },
    {
      "name": "load_balancer_types",
      "description": "Load Balancer types define kinds of Load Balancers offered. Each type has an hourly and a monthly cost. You will pay whichever amount is lower for your usage of this specific Load Balancer. Costs may differ between Locations.\n\nCurrency for all amounts is €. All prices exclude VAT.\n"
    },
    {
      "name": "load_balancers"
    },
    {
      "name": "locations",
      "description": "Datacenters are organized by Locations. Datacenters in the same Location are connected with very low latency links.\n"
    },
    {
      "name": "networks",
      "description": "Networks is a private networks feature. These Networks are optional and they coexist with the public network that every Server has by default.\n\nThey allow Servers to talk to each other over a dedicated network interface using private IP addresses not available publicly.\n\nThe IP addresses are allocated and managed via the API, they must conform to [RFC1918](https://tools.ietf.org/html/rfc1918#section-3) standard. IPs and network interfaces defined under Networks do not provide public internet connectivity, you will need to use the already existing public network interface for that.\n\nEach network has a user selected `ip_range` which defines all available IP addresses which can be used for Subnets within the Network.\n\nTo assign individual IPs to Servers you will need to create Network Subnets, described below.\n\nCurrently Networks support IPv4 only.\n\n### Subnets\n\nSubnets divide the `ip_range` from the parent Network object into multiple Subnetworks that you can use for different specific purposes.\n\nFor each subnet you need to specify its own `ip_range` which must be contained within the parent Network’s `ip_range`. Additionally each subnet must belong to one of the available Network Zones described below. Subnets can not have overlapping IP ranges.\n\nCurrently there are three types of subnet:\n\n- type `cloud` is used to connect cloud Resources into your Network.\n- type `server` was used to connect only cloud Servers into your Network. This type is deprecated and is replaced by type cloud.\n- type `vswitch` allows you to connect [Dedicated Server vSwitch](https://docs.hetzner.com/robot/dedicated-server/network/vswitch) - and all Dedicated Servers attached to it - into your Network\n\nSubnets of type `vswitch` must set a `vswitch_id` which is the ID of the existing vSwitch in Hetzner Robot that should be coupled.\n\n### Network Zones\n\nNetwork Zones are groups of Locations which have special high-speed network connections between them. The [Location object](https://docs.hetzner.cloud/#locations-get-a-location) contains the `network_zone` property each Location belongs to. Currently these network zones exist:\n\n| Network Zone | Contains Locations |\n| ------------ | ------------------ |\n| eu-central   | nbg1, fsn1, hel1   |\n| us-east      | ash                |\n| us-west      | hil                |\n| ap-southeast | sin                |\n\n### IP address management\n\nWhen a cloud Server is attached to a network without the user specifying an IP it automatically gets an IP address assigned from a subnet of type `server` in the same network zone. If you specify the optional `ip` parameter when attaching then we will try to assign that IP. Keep in mind that the Server’s location must be covered by the Subnet’s Network Zone if you specify an IP, or that at least one Subnet with the zone covering Server’s location must exist.\n\nA cloud Server can also have more than one IP address in a Network by specifying aliases. For details see the [attach to network action](https://docs.hetzner.cloud/#server-actions-attach-a-server-to-a-network).\n\nThe following IP addresses are reserved in networks and can not be used:\n\n- the first IP of the network `ip_range` as it will be used as a default gateway for the private Network interface.\n- `172.31.1.1` as it is being used as default gateway for our public Network interfaces.\n\n### Coupling Dedicated Servers\n\nBy using subnets of type `vswitch` you can couple the Cloud Networks with an existing [Dedicated Server vSwitch](https://docs.hetzner.com/robot/dedicated-server/network/vswitch) and enable dedicated and cloud servers to\ntalk to each other over the Network.\nIn order for this to work the dedicated servers may only use IPs from the subnet and must have a special network configuration. Please refer to [FAQ](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). vSwitch Layer 2 features are not supported.\n\n### Routes\n\nNetworks also support the notion of routes which are automatically applied to private traffic. A route makes sure that all packets for a given `destination` IP prefix will be sent to the address specified in its `gateway`.\n"
    },
    {
      "name": "placement_groups",
      "description": "Placement groups are used to influence the location of interdependent virtual servers in our data centers. The distribution of the different instances within a group is based on a pattern specified in the type. By enforcing certain rules on the placement of instances within our infrastructure, availability can be influenced in a way that fits your needs best.\n\nIn `spread` placement groups, all virtual servers will run on different physical servers. This decreases the probability that some instances might fail together.\n"
    },
    {
      "name": "pricing",
      "description": "Returns prices for resources.\n"
    },
    {
      "name": "primary_ips",
      "description": "Primary IPs help you to create more flexible networking setups. You can assign at most one Primary IP of type `ipv4` and one of type `ipv6` per Server. This Server then uses these IPs.\n\nYou can only unassign a Primary IP from a Server when it's powered off. This Primary IP can then be assigned to a different powered off Server, or you can keep it around for later use.\n\nPrimary IPs are bound to a specific Datacenter. You can not assign a Primary IP from one Datacenter to a Server in a different Datacenter. If you need this capability use Floating IPs instead.\n\nIf your Server's operating system supports cloud-init there is no further configuration needed to make Primary IPs work.\n\nPrimary IPs of type `ipv4` use a single IPv4 address as their `ip` property. Primary IPs of type `ipv6` use a /64 network such as `fc00::/64` as their `ip` property. Any IP address within that network can be used on your host.\n\nPrimary IPs are billed on an hourly basis.\n"
    },
    {
      "name": "server_types",
      "description": "Server types define kinds of Servers offered. Each type has an hourly and a monthly cost. You will pay whichever cost is lower for your usage of this specific Server. Costs may differ between Locations.\n\nCurrency for all amounts is €. All prices exclude VAT.\n"
    },
    {
      "name": "servers",
      "description": "Servers are virtual machines that can be provisioned.\n"
    },
    {
      "name": "ssh_keys",
      "description": "SSH keys are public keys you provide to the cloud system. They can be injected into Servers at creation time. We highly recommend that you use keys instead of passwords to manage your Servers.\n"
    },
    {
      "name": "volumes",
      "description": "A Volume is a highly-available, scalable, and SSD-based block storage for Servers.\n\nPricing for Volumes depends on the Volume size and Location, not the actual used storage.\n\nPlease see [Hetzner Docs](https://docs.hetzner.com/cloud/#Volumes) for more details about Volumes.\n"
    }
  ],
  "components": {
    "parameters": {
      "PathActionActionID": {
        "description": "ID of the Action.",
        "in": "path",
        "name": "action_id",
        "required": true,
        "schema": {
          "description": "ID of the Action.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathActionID": {
        "description": "ID of the Action.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Action.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathCertificateID": {
        "description": "ID of the Certificate.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Certificate.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathDatacenterID": {
        "description": "ID of the Datacenter.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Datacenter.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathFirewallID": {
        "description": "ID of the Firewall.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Firewall.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathFloatingIPID": {
        "description": "ID of the Floating IP.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Floating IP.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathID": {
        "description": "ID of the Resource.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Resource.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathISOID": {
        "description": "ID of the ISO.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the ISO.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathImageID": {
        "description": "ID of the Image.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Image.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathLoadBalancerID": {
        "description": "ID of the Load Balancer.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Load Balancer.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathLoadBalancerTypeID": {
        "description": "ID of the Load Balancer Type.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Load Balancer Type.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathLocationID": {
        "description": "ID of the Location.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Location.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathNetworkID": {
        "description": "ID of the Network.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Network.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathPlacementGroupID": {
        "description": "ID of the Placement Group.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Placement Group.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathPrimaryIPID": {
        "description": "ID of the Primary IP.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Primary IP.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathSSHKeyID": {
        "description": "ID of the SSH Key.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the SSH Key.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathServerID": {
        "description": "ID of the Server.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Server.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathServerTypeID": {
        "description": "ID of the Server Type.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Server Type.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "PathVolumeID": {
        "description": "ID of the Volume.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "ID of the Volume.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "QueryActionID": {
        "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
        "in": "query",
        "name": "id",
        "required": false,
        "schema": {
          "description": "ID of the Action.",
          "example": 42,
          "format": "int64",
          "maximum": 9007199254740991,
          "type": "integer"
        }
      },
      "QueryActionSort": {
        "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "enum": [
            "id",
            "id:asc",
            "id:desc",
            "command",
            "command:asc",
            "command:desc",
            "status",
            "status:asc",
            "status:desc",
            "started",
            "started:asc",
            "started:desc",
            "finished",
            "finished:asc",
            "finished:desc"
          ],
          "type": "string"
        }
      },
      "QueryActionStatus": {
        "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "description": "Status of the Action.",
          "enum": [
            "running",
            "success",
            "error"
          ],
          "type": "string"
        }
      },
      "QueryCreatedAfter": {
        "description": "Limit the items in the response to be created after a specified time.\n\nThe parameter is a datetime formatted as specified by RFC3339.\n",
        "in": "query",
        "name": "created_after",
        "required": false,
        "schema": {
          "example": "2016-07-02T01:02:03.04Z",
          "type": "string"
        }
      },
      "QueryCreatedBefore": {
        "description": "Limit the items in the response to be created before a specified time.\n\nThe parameter is a datetime formatted as specified by RFC3339.\n",
        "in": "query",
        "name": "created_before",
        "required": false,
        "schema": {
          "example": "2016-07-02T01:02:03.04Z",
          "type": "string"
        }
      },
      "QueryLabelSelector": {
        "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
        "in": "query",
        "name": "label_selector",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "QueryName": {
        "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "QueryPaginationPage": {
        "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "default": 1,
          "example": 2,
          "format": "int64",
          "type": "integer"
        }
      },
      "QueryPaginationPerPage": {
        "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "default": 25,
          "example": 25,
          "format": "int64",
          "type": "integer"
        }
      },
      "QuerySortByIDAndCreated": {
        "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "enum": [
            "id",
            "id:asc",
            "id:desc",
            "created",
            "created:asc",
            "created:desc"
          ],
          "type": "string"
        }
      },
      "QuerySortByIDAndName": {
        "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "enum": [
            "id",
            "id:asc",
            "id:desc",
            "name",
            "name:asc",
            "name:desc"
          ],
          "type": "string"
        }
      },
      "QuerySortByIDAndNameAndCreated": {
        "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "enum": [
            "id",
            "id:asc",
            "id:desc",
            "name",
            "name:asc",
            "name:desc",
            "created",
            "created:asc",
            "created:desc"
          ],
          "type": "string"
        }
      }
    },
    "schemas": {
      "action": {
        "properties": {
          "command": {
            "description": "Command executed in the Action.",
            "example": "start_resource",
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          },
          "finished": {
            "description": "Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.",
            "example": "2016-01-30T23:55:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the Action",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "progress": {
            "description": "Progress of the Action in percent.",
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "resources": {
            "description": "Resources the Action relates to.",
            "items": {
              "$ref": "#/components/schemas/resource"
            },
            "type": "array"
          },
          "started": {
            "description": "Point in time when the Action was started (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "status": {
            "description": "Status of the Action.",
            "enum": [
              "error",
              "running",
              "success"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "command",
          "status",
          "progress",
          "started",
          "finished",
          "resources",
          "error"
        ],
        "title": "Action",
        "type": "object",
        "description": "Actions show the results and progress of asynchronous requests to the API."
      },
      "action_optional": {
        "nullable": true,
        "properties": {
          "command": {
            "description": "Command executed in the Action.",
            "example": "start_resource",
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          },
          "finished": {
            "description": "Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.",
            "example": "2016-01-30T23:55:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the Action",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "progress": {
            "description": "Progress of the Action in percent.",
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "resources": {
            "description": "Resources the Action relates to.",
            "items": {
              "$ref": "#/components/schemas/resource"
            },
            "type": "array"
          },
          "started": {
            "description": "Point in time when the Action was started (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "status": {
            "description": "Status of the Action.",
            "enum": [
              "error",
              "running",
              "success"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "command",
          "status",
          "progress",
          "started",
          "finished",
          "resources",
          "error"
        ],
        "title": "ActionNullable",
        "type": "object",
        "description": "Actions show the results and progress of asynchronous requests to the API."
      },
      "add_route_to_network_request": {
        "$ref": "#/components/schemas/route"
      },
      "add_route_to_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route"
      },
      "add_server_to_placement_group_request": {
        "properties": {
          "placement_group": {
            "description": "ID of Placement Group the Server should be added to",
            "example": 1,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "placement_group"
        ],
        "title": "AddToPlacementGroupRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/add_to_placement_group"
      },
      "add_server_to_placement_group_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/add_to_placement_group"
      },
      "add_service_request": {
        "$ref": "#/components/schemas/load_balancer_service"
      },
      "add_service_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_service"
      },
      "add_subnet_to_network_request": {
        "$ref": "#/components/schemas/subnet"
      },
      "add_subnet_to_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_subnet"
      },
      "add_target_request": {
        "$ref": "#/components/schemas/load_balancer_add_target"
      },
      "add_target_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_target"
      },
      "apply_to_resources_request": {
        "properties": {
          "apply_to": {
            "description": "Resources to apply the [Firewall](#firewalls) to.\n\nExtends existing resources.\n",
            "items": {
              "$ref": "#/components/schemas/firewall_resource"
            },
            "type": "array"
          }
        },
        "required": [
          "apply_to"
        ],
        "title": "ApplyToResourcesRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/apply_to_resources"
      },
      "apply_to_resources_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          }
        },
        "required": [
          "actions"
        ],
        "title": "ActionListResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/apply_to_resources"
      },
      "architecture": {
        "description": "Type of cpu architecture this image is compatible with. | Type of cpu architecture",
        "enum": [
          "arm",
          "x86"
        ],
        "example": "x86",
        "type": "string"
      },
      "architecture_optional": {
        "description": "Type of cpu architecture this iso is compatible with. Null indicates no restriction on the architecture (wildcard).",
        "enum": [
          "arm",
          "x86"
        ],
        "example": "x86",
        "nullable": true,
        "type": "string"
      },
      "assign_floating_ip_to_server_request": {
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/assign",
        "properties": {
          "server": {
            "description": "[Server](#servers) the [Floating IP](#floating-ips) is assigned to.\n\n`null` if not assigned.\n",
            "example": 42,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "server"
        ],
        "title": "FloatingIPActionsAssignRequest",
        "type": "object"
      },
      "assign_floating_ip_to_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/assign"
      },
      "assign_primary_ip_to_resource_request": {
        "properties": {
          "assignee_id": {
            "description": "ID of a resource of type `assignee_type`",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          },
          "assignee_type": {
            "description": "Type of resource assigning the Primary IP to",
            "enum": [
              "server"
            ],
            "example": "server",
            "type": "string"
          }
        },
        "required": [
          "assignee_type",
          "assignee_id"
        ],
        "title": "PrimaryIPActionsAssignRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/assign"
      },
      "assign_primary_ip_to_resource_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/assign"
      },
      "attach_iso_to_server_request": {
        "properties": {
          "iso": {
            "description": "ID or name of ISO to attach to the Server as listed in GET `/isos`",
            "example": "FreeBSD-11.0-RELEASE-amd64-dvd1",
            "type": "string"
          }
        },
        "required": [
          "iso"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_iso"
      },
      "attach_iso_to_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_iso"
      },
      "attach_load_balancer_to_network_request": {
        "properties": {
          "ip": {
            "description": "IP to request to be assigned to this Load Balancer; if you do not provide this then you will be auto assigned an IP address",
            "example": "10.0.1.1",
            "type": "string"
          },
          "network": {
            "description": "ID of an existing network to attach the Load Balancer to",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "network"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/attach_to_network"
      },
      "attach_load_balancer_to_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/attach_to_network"
      },
      "attach_server_to_network_request": {
        "properties": {
          "alias_ips": {
            "description": "Additional IPs to be assigned to this Server",
            "example": [
              "10.0.1.2"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ip": {
            "description": "IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address",
            "example": "10.0.1.1",
            "type": "string"
          },
          "network": {
            "description": "ID of an existing network to attach the Server to",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "network"
        ],
        "title": "AttachToNetworkRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network"
      },
      "attach_server_to_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network"
      },
      "attach_volume_to_server_request": {
        "properties": {
          "automount": {
            "description": "Auto-mount the Volume after attaching it",
            "example": false,
            "type": "boolean"
          },
          "server": {
            "description": "ID of the Server the Volume will be attached to",
            "example": 43,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "server"
        ],
        "title": "AttachVolumeRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/attach"
      },
      "attach_volume_to_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/attach"
      },
      "certificate": {
        "properties": {
          "certificate": {
            "description": "Certificate and chain in PEM format, in order so that each record directly certifies the one preceding",
            "example": "-----BEGIN CERTIFICATE-----\n...",
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "domain_names": {
            "description": "Domains and subdomains covered by the Certificate",
            "example": [
              "example.com",
              "webmail.example.com",
              "www.example.com"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "SHA256 fingerprint of the Certificate",
            "example": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the Certificate.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "not_valid_after": {
            "description": "Point in time when the Certificate stops being valid (in ISO-8601 format)",
            "example": "2019-07-08T09:59:59+00:00",
            "nullable": true,
            "type": "string"
          },
          "not_valid_before": {
            "description": "Point in time when the Certificate becomes valid (in ISO-8601 format)",
            "example": "2019-01-08T10:00:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates",
            "nullable": true,
            "properties": {
              "error": {
                "description": "If issuance or renewal reports `failed`, this property contains information about what happened",
                "example": null,
                "nullable": true,
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "issuance": {
                "description": "Status of the issuance process of the Certificate",
                "enum": [
                  "completed",
                  "failed",
                  "pending"
                ],
                "example": "completed",
                "type": "string"
              },
              "renewal": {
                "description": "Status of the renewal process of the Certificate.",
                "enum": [
                  "failed",
                  "pending",
                  "scheduled",
                  "unavailable"
                ],
                "example": "scheduled",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Type of the Certificate",
            "enum": [
              "managed",
              "uploaded"
            ],
            "example": "uploaded",
            "type": "string"
          },
          "used_by": {
            "description": "Resources currently using the Certificate",
            "items": {
              "$ref": "#/components/schemas/resource"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "labels",
          "certificate",
          "created",
          "not_valid_before",
          "not_valid_after",
          "domain_names",
          "fingerprint",
          "used_by"
        ],
        "title": "Certificate",
        "type": "object",
        "description": "TLS/SSL Certificates prove the identity of a Server and are used to encrypt client traffic."
      },
      "change_algorithm_request": {
        "$ref": "#/components/schemas/load_balancer_algorithm"
      },
      "change_algorithm_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_algorithm"
      },
      "change_alias_ips_of_network_request": {
        "properties": {
          "alias_ips": {
            "description": "New alias IPs to set for this Server",
            "example": [
              "10.0.1.2"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "network": {
            "description": "ID of an existing Network already attached to the Server",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "network",
          "alias_ips"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_alias_ips"
      },
      "change_alias_ips_of_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_alias_ips"
      },
      "change_floating_ip_protection_request": {
        "$ref": "#/components/schemas/protection"
      },
      "change_floating_ip_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_protection"
      },
      "change_image_protection_request": {
        "properties": {
          "delete": {
            "description": "If true, prevents the snapshot from being deleted",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/images/{id}/actions/change_protection"
      },
      "change_image_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/images/{id}/actions/change_protection"
      },
      "change_ip_range_of_network_request": {
        "properties": {
          "ip_range": {
            "description": "IP range of the [Network](#networks).\n\nUses CIDR notation.\n\nMust span all included subnets. Must be one of the private IPv4 ranges of RFC1918.\n\nMinimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask.\n",
            "example": "10.0.0.0/16",
            "type": "string"
          }
        },
        "required": [
          "ip_range"
        ],
        "title": "ChangeIPRangeRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_ip_range"
      },
      "change_ip_range_of_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_ip_range"
      },
      "change_load_balancer_protection_request": {
        "properties": {
          "delete": {
            "description": "If true, prevents the Load Balancer from being deleted",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_protection"
      },
      "change_load_balancer_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_protection"
      },
      "change_network_protection_request": {
        "properties": {
          "delete": {
            "description": "Delete protection setting.\n\nIf true, prevents the [Network](#networks) from being deleted.\n",
            "example": true,
            "type": "boolean"
          }
        },
        "title": "ChangeProtectionRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_protection"
      },
      "change_network_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_protection"
      },
      "change_primary_ip_protection_request": {
        "$ref": "#/components/schemas/protection"
      },
      "change_primary_ip_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_protection"
      },
      "change_reverse_dns_entry_for_this_load_balancer_request": {
        "properties": {
          "dns_ptr": {
            "description": "Hostname to set as a reverse DNS PTR entry",
            "example": "lb1.example.com",
            "nullable": true,
            "type": "string"
          },
          "ip": {
            "description": "Public IP address for which the reverse DNS entry should be set",
            "example": "1.2.3.4",
            "type": "string"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ],
        "title": "ChangeLoadbalancerDnsPtrRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_entry_for_this_load_balancer_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_entry_for_this_server_request": {
        "properties": {
          "dns_ptr": {
            "description": "Hostname to set as a reverse DNS PTR entry, reset to original value if `null`",
            "example": "server01.example.com",
            "nullable": true,
            "type": "string"
          },
          "ip": {
            "description": "Primary IP address for which the reverse DNS entry should be set",
            "example": "1.2.3.4",
            "type": "string"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_entry_for_this_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_records_for_floating_ip_request": {
        "$ref": "#/components/schemas/dns_ptr"
      },
      "change_reverse_dns_records_for_floating_ip_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_records_for_primary_ip_request": {
        "$ref": "#/components/schemas/dns_ptr"
      },
      "change_reverse_dns_records_for_primary_ip_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_dns_ptr"
      },
      "change_server_protection_request": {
        "properties": {
          "delete": {
            "description": "If true, prevents the Server from being deleted (currently delete and rebuild attribute needs to have the same value)",
            "example": true,
            "type": "boolean"
          },
          "rebuild": {
            "description": "If true, prevents the Server from being rebuilt (currently delete and rebuild attribute needs to have the same value)",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_protection"
      },
      "change_server_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_protection"
      },
      "change_type_of_load_balancer_request": {
        "properties": {
          "load_balancer_type": {
            "description": "ID or name of Load Balancer type the Load Balancer should migrate to",
            "example": "lb21",
            "type": "string"
          }
        },
        "required": [
          "load_balancer_type"
        ],
        "title": "ChangeTypeRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_type"
      },
      "change_type_of_load_balancer_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_type"
      },
      "change_type_of_server_request": {
        "properties": {
          "server_type": {
            "description": "ID or name of Server type the Server should migrate to",
            "example": "cpx11",
            "type": "string"
          },
          "upgrade_disk": {
            "description": "If false, do not upgrade the disk (this allows downgrading the Server type later)",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "upgrade_disk",
          "server_type"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type"
      },
      "change_type_of_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type"
      },
      "change_volume_protection_request": {
        "properties": {
          "delete": {
            "description": "If true, prevents the Volume from being deleted",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/change_protection"
      },
      "change_volume_protection_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/change_protection"
      },
      "create_certificate_request": {
        "properties": {
          "certificate": {
            "description": "Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.",
            "example": "-----BEGIN CERTIFICATE-----\n...",
            "type": "string"
          },
          "domain_names": {
            "description": "Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.",
            "example": null,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Certificate",
            "example": "my website cert",
            "type": "string"
          },
          "private_key": {
            "description": "Certificate key in PEM format. Required for type `uploaded` Certificates.",
            "example": "-----BEGIN PRIVATE KEY-----\n...",
            "type": "string"
          },
          "type": {
            "default": "uploaded",
            "description": "Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate.",
            "enum": [
              "managed",
              "uploaded"
            ],
            "example": "uploaded",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "CreateCertificateRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/certificates"
      },
      "create_certificate_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action_optional"
          },
          "certificate": {
            "$ref": "#/components/schemas/certificate"
          }
        },
        "required": [
          "certificate"
        ],
        "title": "CreateCertificateResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/certificates"
      },
      "create_firewall_request": {
        "properties": {
          "apply_to": {
            "description": "Resources to apply the [Firewall](#firewalls) to.\n\nResources added directly are taking precedence over those added via a [Label Selector](#label-selector).\n",
            "items": {
              "$ref": "#/components/schemas/firewall_resource"
            },
            "type": "array"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the [Firewall](#firewalls).\n\nLimited to a maximum of 128 characters.\n\nMust be unique per Project.\n",
            "example": "new-name",
            "type": "string"
          },
          "rules": {
            "description": "Array of rules.\n\nRules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits).\n",
            "example": [
              {
                "direction": "in",
                "port": "80",
                "protocol": "tcp",
                "source_ips": [
                  "28.239.13.1/32",
                  "28.239.14.0/24",
                  "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/rule"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "title": "CreateFirewallRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/firewalls"
      },
      "create_firewall_response": {
        "properties": {
          "actions": {
            "example": [
              {
                "command": "set_firewall_rules",
                "error": {
                  "code": "action_failed",
                  "message": "Action failed"
                },
                "finished": "2016-01-30T23:56:00+00:00",
                "id": 13,
                "progress": 100,
                "resources": [
                  {
                    "id": 38,
                    "type": "firewall"
                  }
                ],
                "started": "2016-01-30T23:55:00+00:00",
                "status": "success"
              },
              {
                "command": "apply_firewall",
                "error": {
                  "code": "action_failed",
                  "message": "Action failed"
                },
                "finished": "2016-01-30T23:56:00+00:00",
                "id": 14,
                "progress": 100,
                "resources": [
                  {
                    "id": 42,
                    "type": "server"
                  },
                  {
                    "id": 38,
                    "type": "firewall"
                  }
                ],
                "started": "2016-01-30T23:55:00+00:00",
                "status": "success"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "firewall": {
            "$ref": "#/components/schemas/firewall"
          }
        },
        "title": "CreateFirewallResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/firewalls"
      },
      "create_floating_ip_request": {
        "properties": {
          "description": {
            "description": "Description of the Resource.",
            "example": "This describes my resource",
            "nullable": true,
            "type": "string"
          },
          "home_location": {
            "description": "Home [Location](#locations) for the [Floating IP](#floating-ips).\n\nEither the ID or the name of the [Location](#locations).\n\nOnly optional if no [Server](#servers) is provided. Routing is optimized for this [Locations](#locations).\n",
            "example": "fsn1",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "server": {
            "description": "[Server](#servers) the [Floating IP](#floating-ips) is assigned to.\n\n`null` if not assigned.\n",
            "example": 42,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ip_type"
          }
        },
        "required": [
          "type"
        ],
        "title": "FloatingIPCreateRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips"
      },
      "create_floating_ip_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          }
        },
        "required": [
          "floating_ip"
        ],
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips"
      },
      "create_image_from_server_request": {
        "properties": {
          "description": {
            "description": "Description of the Image, will be auto-generated if not set",
            "example": "my image",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "type": {
            "default": "snapshot",
            "description": "Type of Image to create.",
            "enum": [
              "backup",
              "snapshot"
            ],
            "example": "snapshot",
            "type": "string"
          }
        },
        "title": "CreateImageRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/create_image"
      },
      "create_image_from_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "image": {
            "$ref": "#/components/schemas/image"
          }
        },
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/create_image"
      },
      "create_load_balancer_request": {
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/load_balancer_algorithm"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "load_balancer_type": {
            "description": "ID or name of the Load Balancer type this Load Balancer should be created with",
            "example": "lb11",
            "type": "string"
          },
          "location": {
            "description": "ID or name of Location to create Load Balancer in",
            "type": "string"
          },
          "name": {
            "description": "Name of the Load Balancer",
            "example": "Web Frontend",
            "type": "string"
          },
          "network": {
            "description": "ID of the network the Load Balancer should be attached to on creation",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "network_zone": {
            "description": "Name of network zone",
            "example": "eu-central",
            "type": "string"
          },
          "public_interface": {
            "description": "Enable or disable the public interface of the Load Balancer",
            "example": true,
            "type": "boolean"
          },
          "services": {
            "description": "Array of services",
            "items": {
              "$ref": "#/components/schemas/load_balancer_service"
            },
            "type": "array"
          },
          "targets": {
            "description": "Array of targets",
            "items": {
              "$ref": "#/components/schemas/load_balancer_add_target"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "load_balancer_type"
        ],
        "title": "CreateLoadBalancerRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers"
      },
      "create_load_balancer_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "load_balancer": {
            "$ref": "#/components/schemas/load_balancer"
          }
        },
        "required": [
          "load_balancer",
          "action"
        ],
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers"
      },
      "create_network_request": {
        "properties": {
          "expose_routes_to_vswitch": {
            "description": "Toggle to expose routes to the [Networks](#networks) vSwitch.\n\nIndicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks).\n",
            "example": false,
            "type": "boolean"
          },
          "ip_range": {
            "description": "IP range of the [Network](#networks).\n\nUses CIDR notation.\n\nMust span all included subnets. Must be one of the private IPv4 ranges of RFC1918.\n\nMinimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask.\n",
            "example": "10.0.0.0/16",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the [Network](#networks).",
            "example": "mynet",
            "type": "string"
          },
          "routes": {
            "description": "Array of routes set in this [Network](#networks).",
            "items": {
              "$ref": "#/components/schemas/route"
            },
            "type": "array"
          },
          "subnets": {
            "description": "Array of subnets to allocate.",
            "items": {
              "$ref": "#/components/schemas/subnet"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "ip_range"
        ],
        "title": "NetworkCreateRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/networks"
      },
      "create_network_response": {
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks"
      },
      "create_placementgroup_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the PlacementGroup",
            "example": "my Placement Group",
            "type": "string"
          },
          "type": {
            "description": "Define the Placement Group Type.",
            "enum": [
              "spread"
            ],
            "example": "spread",
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "title": "CreatePlacementGroupRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/placement_groups"
      },
      "create_placementgroup_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action_optional"
          },
          "placement_group": {
            "properties": {
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "id": {
                "description": "ID of the Placement Group.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "servers": {
                "description": "Array of IDs of Servers that are part of this Placement Group",
                "example": [
                  42
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "type": {
                "description": "Type of the Placement Group",
                "enum": [
                  "spread"
                ],
                "example": "spread",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "type",
              "created",
              "servers"
            ],
            "title": "PlacementGroup",
            "type": "object"
          }
        },
        "required": [
          "placement_group"
        ],
        "title": "CreatePlacementGroupResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/placement_groups"
      },
      "create_primary_ip_request": {
        "properties": {
          "assignee_id": {
            "description": "ID of resource to assign the [Primary IP](#primary-ips) to.\n\nOmitted if the [Primary IP](#primary-ips) should not get assigned.\n",
            "example": 17,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "assignee_type": {
            "description": "Type of resource to assign the [Primary IP](#primary-ips) to.\n\nOmitted if the [Primary IP](#primary-ips) should not get assigned.\n",
            "enum": [
              "server"
            ],
            "example": "server",
            "type": "string"
          },
          "auto_delete": {
            "default": false,
            "description": "Auto deletion state.\n\nIf enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.\n",
            "example": false,
            "type": "boolean"
          },
          "datacenter": {
            "description": "[Datacenter](#datacenters) ID or name.\n\nThe  [Primary IP](#primary-ips) will be bound to this [Datacenter](#datacenters). Omit if `assignee_id`/`assignee_type` is provided.\n",
            "example": "fsn1-dc8",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ip_type_optional"
          }
        },
        "required": [
          "name",
          "type",
          "assignee_type"
        ],
        "title": "PrimaryIPCreateRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/primary_ips"
      },
      "create_primary_ip_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "primary_ip": {
            "properties": {
              "assignee_id": {
                "description": "ID of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                "example": 17,
                "format": "int64",
                "nullable": true,
                "type": "integer"
              },
              "assignee_type": {
                "description": "Type of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                "enum": [
                  "server"
                ],
                "example": "server",
                "type": "string"
              },
              "auto_delete": {
                "default": false,
                "description": "Auto deletion state.\n\nIf enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.\n",
                "example": true,
                "type": "boolean"
              },
              "blocked": {
                "description": "Blocked state of the [Primary IP](#primary-ips).",
                "example": false,
                "type": "boolean"
              },
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "datacenter": {
                "$ref": "#/components/schemas/datacenter"
              },
              "dns_ptr": {
                "description": "List of reverse DNS records.",
                "items": {
                  "$ref": "#/components/schemas/dns_ptr"
                },
                "type": "array"
              },
              "id": {
                "description": "ID of the Primary IP.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "ip": {
                "description": "IP address.",
                "example": "131.232.99.1",
                "type": "string"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "protection": {
                "$ref": "#/components/schemas/protection"
              },
              "type": {
                "$ref": "#/components/schemas/ip_type_optional"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "created",
              "blocked",
              "datacenter",
              "ip",
              "dns_ptr",
              "protection",
              "type",
              "auto_delete",
              "assignee_type",
              "assignee_id"
            ],
            "title": "PrimaryIP",
            "type": "object"
          }
        },
        "required": [
          "primary_ip"
        ],
        "title": "CreatePrimaryIPResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/primary_ips"
      },
      "create_server_request": {
        "properties": {
          "automount": {
            "description": "Auto-mount Volumes after attach",
            "example": false,
            "type": "boolean"
          },
          "datacenter": {
            "description": "ID or name of Datacenter to create Server in (must not be used together with location)",
            "example": "nbg1-dc3",
            "type": "string"
          },
          "firewalls": {
            "description": "Firewalls which should be applied on the Server's public network interface at creation time",
            "example": [
              {
                "firewall": 38
              }
            ],
            "items": {
              "properties": {
                "firewall": {
                  "description": "ID of the Firewall",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "firewall"
              ],
              "type": "object",
              "title": "CreateServerRequestFirewalls"
            },
            "type": "array"
          },
          "image": {
            "description": "ID or name of the Image the Server is created from",
            "example": "ubuntu-20.04",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "location": {
            "description": "ID or name of Location to create Server in (must not be used together with datacenter)",
            "example": "nbg1",
            "type": "string"
          },
          "name": {
            "description": "Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)",
            "example": "my-server",
            "type": "string"
          },
          "networks": {
            "description": "Network IDs which should be attached to the Server private network interface at the creation time",
            "example": [
              456
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "placement_group": {
            "description": "ID of the Placement Group the server should be in",
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "public_net": {
            "description": "Public Network options",
            "properties": {
              "enable_ipv4": {
                "default": true,
                "description": "Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached.",
                "type": "boolean"
              },
              "enable_ipv6": {
                "default": true,
                "description": "Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached.",
                "type": "boolean"
              },
              "ipv4": {
                "description": "ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.",
                "nullable": true,
                "type": "integer"
              },
              "ipv6": {
                "description": "ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.",
                "nullable": true,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "server_type": {
            "description": "ID or name of the Server type this Server should be created with",
            "example": "cpx11",
            "type": "string"
          },
          "ssh_keys": {
            "description": "SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time",
            "example": [
              "my-ssh-key"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "start_after_create": {
            "default": true,
            "description": "This automatically triggers a [Power on a Server-Server Action](#server-actions-power-on-a-server) after the creation is finished and is returned in the `next_actions` response object.",
            "example": true,
            "type": "boolean"
          },
          "user_data": {
            "description": "Cloud-Init user data to use during Server creation. This field is limited to 32KiB.",
            "example": "#cloud-config\nruncmd:\n- [touch, /root/cloud-init-worked]\n",
            "type": "string"
          },
          "volumes": {
            "description": "Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.",
            "example": [
              123
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "server_type",
          "image"
        ],
        "title": "CreateServerRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers"
      },
      "create_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "next_actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "root_password": {
            "description": "Root password when no SSH keys have been specified",
            "example": "YItygq1v3GYjjMomLaKc",
            "nullable": true,
            "type": "string"
          },
          "server": {
            "$ref": "#/components/schemas/server"
          }
        },
        "required": [
          "server",
          "action",
          "next_actions",
          "root_password"
        ],
        "title": "CreateServerResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers"
      },
      "create_ssh_key_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the SSH key",
            "example": "My ssh key",
            "type": "string"
          },
          "public_key": {
            "description": "Public key",
            "example": "ssh-rsa AAAjjk76kgf...Xt",
            "type": "string"
          }
        },
        "required": [
          "name",
          "public_key"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/ssh_keys"
      },
      "create_ssh_key_response": {
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ],
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/ssh_keys"
      },
      "create_volume_request": {
        "properties": {
          "automount": {
            "description": "Auto-mount Volume after attach. `server` must be provided.",
            "example": false,
            "type": "boolean"
          },
          "format": {
            "description": "Format Volume after creation. One of: `xfs`, `ext4`",
            "example": "xfs",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "location": {
            "description": "Location to create the Volume in (can be omitted if Server is specified)",
            "example": "nbg1",
            "type": "string"
          },
          "name": {
            "description": "Name of the volume",
            "example": "databases-storage",
            "type": "string"
          },
          "server": {
            "description": "Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)",
            "format": "int64",
            "type": "integer"
          },
          "size": {
            "description": "Size of the Volume in GB",
            "example": 42,
            "type": "integer"
          }
        },
        "required": [
          "size",
          "name"
        ],
        "title": "CreateVolumeRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes"
      },
      "create_volume_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "next_actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "volume": {
            "$ref": "#/components/schemas/volume"
          }
        },
        "required": [
          "volume",
          "action",
          "next_actions"
        ],
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes"
      },
      "created_from": {
        "description": "Information about the Server the Image was created from",
        "nullable": true,
        "properties": {
          "id": {
            "description": "ID of the Server the Image was created from",
            "example": 1,
            "format": "int64",
            "type": "integer",
            "maximum": 9007199254740991
          },
          "name": {
            "description": "Server name at the time the Image was created",
            "example": "Server",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "datacenter": {
        "properties": {
          "description": {
            "description": "Descriptive name for the [Datacenter](#datacenters).\n\nDesired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.\n",
            "example": "Falkenstein DC Park 8",
            "type": "string"
          },
          "id": {
            "description": "ID of the Datacenter.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "name": {
            "description": "Unique name for the [Datacenter](#datacenters).\n\nCan be used as a more descriptive identifier.\n",
            "example": "fsn1-dc8",
            "pattern": "^[a-z0-9]+(-?[a-z0-9]*)*$",
            "type": "string"
          },
          "server_types": {
            "description": "[Server Types](#server-types) supported and available in this [Datacenter](#datacenters).\n",
            "properties": {
              "available": {
                "description": "[Server Types](#server-types) currently available in this [Datacenter](#datacenters).\n\nThese [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable\nbut are supported in this [Datacenter](#datacenters) are listed as `supported`.\n",
                "example": [
                  1,
                  2,
                  3
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "available_for_migration": {
                "description": "[Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).\n\nExisting [Servers](#servers) can be migrated to these [Server Types](#server-types).\n",
                "example": [
                  1,
                  2,
                  3
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "supported": {
                "description": "List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).\n\nThese [Server Types](#server-types) are generally available in this Datacenter, but might be\ntemporarily out of stock.\n",
                "example": [
                  1,
                  2,
                  3
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "required": [
              "supported",
              "available",
              "available_for_migration"
            ],
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "location",
          "server_types"
        ],
        "type": "object",
        "description": "[Datacenter](#datacenters) the [Primary IP](#primary-ips) is located at. | Datacenter this Resource is located at"
      },
      "delete_route_from_network_request": {
        "$ref": "#/components/schemas/route"
      },
      "delete_route_from_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route"
      },
      "delete_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "type": "object",
        "description": "Response to DELETE https://api.hetzner.cloud/v1/servers/{id}"
      },
      "delete_service_request": {
        "properties": {
          "listen_port": {
            "description": "The listen port of the service you want to delete",
            "example": 443,
            "type": "integer"
          }
        },
        "required": [
          "listen_port"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/delete_service"
      },
      "delete_service_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/delete_service"
      },
      "delete_subnet_from_network_request": {
        "properties": {
          "ip_range": {
            "description": "IP range in CIDR block notation of the subnet to delete.",
            "example": "10.0.1.0/24",
            "type": "string"
          }
        },
        "required": [
          "ip_range"
        ],
        "title": "DeleteSubnetRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_subnet"
      },
      "delete_subnet_from_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_subnet"
      },
      "deprecation_info": {
        "description": "Describes if, when and how the resource is deprecated. If this field is\nset to `null` the resource is not deprecated. If a value is set, it is\nconsidered deprecated.\n",
        "nullable": true,
        "properties": {
          "announced": {
            "description": "Date of the deprecation announcement.\n",
            "example": "2023-06-01T00:00:00+00:00",
            "format": "iso-8601",
            "type": "string"
          },
          "unavailable_after": {
            "description": "Date of the deprecated resource removal.\n\nOnce this date is reached, the resource will not be returned\nby resource type \"list\" endpoint, and the resource can not be\nused to create new resources. For example, if this is an\nimage, you can not create new servers with this image after\nthe mentioned date.\n",
            "example": "2023-09-01T00:00:00+00:00",
            "format": "iso-8601",
            "type": "string"
          }
        },
        "required": [
          "unavailable_after",
          "announced"
        ],
        "title": "DeprecationInfo",
        "type": "object"
      },
      "detach_iso_from_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_iso"
      },
      "detach_load_balancer_from_network_request": {
        "properties": {
          "network": {
            "description": "ID of an existing network to detach the Load Balancer from",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "network"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/detach_from_network"
      },
      "detach_load_balancer_from_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/detach_from_network"
      },
      "detach_server_from_network_request": {
        "properties": {
          "network": {
            "description": "ID of an existing network to detach the Server from",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "network"
        ],
        "title": "DetachFromNetworkRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_from_network"
      },
      "detach_server_from_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_from_network"
      },
      "detach_volume_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/detach"
      },
      "disable_backups_for_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/disable_backup"
      },
      "disable_public_interface_of_load_balancer_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/disable_public_interface"
      },
      "disable_rescue_mode_for_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/disable_rescue"
      },
      "dns_ptr": {
        "properties": {
          "dns_ptr": {
            "description": "Domain Name to point to.\n\nPTR record content used for reverse DNS.\n | DNS pointer for the specific IP address",
            "example": "server.example.com",
            "type": "string"
          },
          "ip": {
            "description": "Single IPv4 or IPv6 address to create pointer for.\n | Single IPv6 address of this Server for which the reverse DNS entry has been set up",
            "example": "2001:db8::1",
            "type": "string"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr | Request for POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_dns_ptr"
      },
      "enable_and_configure_backups_for_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_backup"
      },
      "enable_public_interface_of_load_balancer_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/enable_public_interface"
      },
      "enable_rescue_mode_for_server_request": {
        "properties": {
          "ssh_keys": {
            "description": "Array of SSH key IDs which should be injected into the rescue system.",
            "example": [
              2323
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "type": {
            "default": "linux64",
            "description": "Type of rescue system to boot.",
            "enum": [
              "linux64"
            ],
            "type": "string"
          }
        },
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue"
      },
      "enable_rescue_mode_for_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "root_password": {
            "description": "Password that will be set for this Server once the Action succeeds",
            "example": "zCWbFhnu950dUTko5f40",
            "type": "string"
          }
        },
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue"
      },
      "error": {
        "description": "Error message for the Action if an error occurred, otherwise null.",
        "nullable": true,
        "properties": {
          "code": {
            "description": "Fixed error code for machines.",
            "example": "action_failed",
            "type": "string"
          },
          "message": {
            "description": "Error message for humans.",
            "example": "Action failed",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "firewall": {
        "properties": {
          "applied_to": {
            "items": {
              "$ref": "#/components/schemas/firewall_resource_id"
            },
            "type": "array"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "id": {
            "description": "ID of the Firewall.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the [Firewall](#firewalls).\n\nLimited to a maximum of 128 characters.\n\nMust be unique per Project.\n",
            "example": "new-name",
            "type": "string"
          },
          "rules": {
            "items": {
              "properties": {
                "description": {
                  "description": "Description of the rule.",
                  "maxLength": 255,
                  "nullable": true,
                  "type": "string"
                },
                "destination_ips": {
                  "description": "List of permitted IPv4/IPv6 addresses for outgoing traffic.\n\nThe `direction` must be set to `out`.\n\nIPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR\nblocks at most.\n\nThe CIDR blocks may refer to networks (with empty host bits) or single hosts.\nFor example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,\nand a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.\n\nUse `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.\n",
                  "example": [],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "direction": {
                  "description": "Traffic direction in which the rule should be applied to.\n\nUse `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.\n",
                  "enum": [
                    "in",
                    "out"
                  ],
                  "example": "in",
                  "type": "string"
                },
                "port": {
                  "description": "Port or port range to apply the rule for.\n\nOnly applicable for protocols `tcp` and `udp`.\n\nA port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include\nall ports starting from 1024 up to port 5000.\n",
                  "example": "80",
                  "nullable": true,
                  "type": "string"
                },
                "protocol": {
                  "description": "Network protocol to apply the rule for.",
                  "enum": [
                    "esp",
                    "gre",
                    "icmp",
                    "tcp",
                    "udp"
                  ],
                  "type": "string"
                },
                "source_ips": {
                  "description": "List of permitted IPv4/IPv6 addresses for incoming traffic.\n\nThe `direction` must be set to `in`.\n\nIPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR\nblocks at most.\n\nThe CIDR blocks may refer to networks (with empty host bits) or single hosts.\nFor example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,\nand a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.\n\nUse `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.\n",
                  "example": [
                    "28.239.13.1/32",
                    "28.239.14.0/24",
                    "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "direction",
                "protocol",
                "destination_ips",
                "source_ips",
                "port"
              ],
              "title": "RuleResponse",
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "created",
          "rules",
          "applied_to"
        ],
        "title": "FirewallResponse",
        "type": "object",
        "description": "Firewalls can limit the network access to or from your resources."
      },
      "firewall_resource": {
        "properties": {
          "label_selector": {
            "$ref": "#/components/schemas/label_selector"
          },
          "server": {
            "$ref": "#/components/schemas/resource_id"
          },
          "type": {
            "description": "Type of the resource.",
            "enum": [
              "label_selector",
              "server"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "FirewallResource",
        "type": "object",
        "description": "Resource a Firewall should be applied to."
      },
      "firewall_resource_id": {
        "properties": {
          "applied_to_resources": {
            "description": "Resources applied to via this [Label Selector](#label-selector).\n",
            "items": {
              "properties": {
                "server": {
                  "$ref": "#/components/schemas/resource_id"
                },
                "type": {
                  "description": "Type of resource.",
                  "enum": [
                    "server"
                  ],
                  "example": "server",
                  "type": "string"
                }
              },
              "type": "object",
              "title": "FirewallResourceIdAppliedToResources"
            },
            "type": "array"
          },
          "label_selector": {
            "$ref": "#/components/schemas/label_selector"
          },
          "server": {
            "$ref": "#/components/schemas/resource_id"
          },
          "type": {
            "description": "The type of resource to apply.",
            "enum": [
              "label_selector",
              "server"
            ],
            "example": "server",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "description": "Resource a Firewall should be applied to."
      },
      "floating_ip": {
        "properties": {
          "blocked": {
            "description": "Indicates whether the [Floating IP](#floating-ips) is blocked.",
            "example": false,
            "type": "boolean"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "description": {
            "description": "Description of the Resource.",
            "example": "This describes my resource",
            "nullable": true,
            "type": "string"
          },
          "dns_ptr": {
            "description": "List of reverse DNS entries for the [Floating IP](#floating-ips).\n",
            "items": {
              "$ref": "#/components/schemas/dns_ptr"
            },
            "type": "array"
          },
          "home_location": {
            "$ref": "#/components/schemas/location"
          },
          "id": {
            "description": "ID of the Floating IP.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "ip": {
            "description": "IP address.",
            "example": "131.232.99.1",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "server": {
            "description": "[Server](#servers) the [Floating IP](#floating-ips) is assigned to.\n\n`null` if not assigned.\n",
            "example": 42,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ip_type"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "ip",
          "type",
          "server",
          "dns_ptr",
          "home_location",
          "blocked",
          "protection",
          "labels",
          "created"
        ],
        "type": "object"
      },
      "get_action_for_certificate_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/certificates/{id}/actions/{action_id}"
      },
      "get_action_for_firewall_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/firewalls/{id}/actions/{action_id}"
      },
      "get_action_for_floating_ip_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}/actions/{action_id}"
      },
      "get_action_for_image_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/images/{id}/actions/{action_id}"
      },
      "get_action_for_load_balancer_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/actions/{action_id}"
      },
      "get_action_for_network_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/networks/{id}/actions/{action_id}"
      },
      "get_action_for_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}/actions/{action_id}"
      },
      "get_action_for_volume_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes/{id}/actions/{action_id}"
      },
      "get_action_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/{resource}/actions"
      },
      "get_certificate_response": {
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificate"
          }
        },
        "required": [
          "certificate"
        ],
        "title": "CertificateResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/certificates/{id}"
      },
      "get_datacenter_response": {
        "properties": {
          "datacenter": {
            "$ref": "#/components/schemas/datacenter"
          }
        },
        "required": [
          "datacenter"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/datacenters/{id}"
      },
      "get_firewall_response": {
        "properties": {
          "firewall": {
            "$ref": "#/components/schemas/firewall"
          }
        },
        "required": [
          "firewall"
        ],
        "title": "FirewallResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/firewalls/{id}"
      },
      "get_floating_ip_response": {
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          }
        },
        "required": [
          "floating_ip"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}"
      },
      "get_image_response": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          }
        },
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/images/{id}"
      },
      "get_iso_response": {
        "properties": {
          "iso": {
            "$ref": "#/components/schemas/iso"
          }
        },
        "required": [
          "iso"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/isos/{id}"
      },
      "get_load_balancer_response": {
        "properties": {
          "load_balancer": {
            "$ref": "#/components/schemas/load_balancer"
          }
        },
        "required": [
          "load_balancer"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}"
      },
      "get_load_balancer_type_response": {
        "properties": {
          "load_balancer_type": {
            "$ref": "#/components/schemas/load_balancer_type"
          }
        },
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancer_types/{id}"
      },
      "get_location_response": {
        "properties": {
          "location": {
            "$ref": "#/components/schemas/location"
          }
        },
        "required": [
          "location"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/locations/{id}"
      },
      "get_metrics_for_loadbalancer_response": {
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/metrics"
          }
        },
        "required": [
          "metrics"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/metrics"
      },
      "get_metrics_for_server_response": {
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/metrics"
          }
        },
        "required": [
          "metrics"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}/metrics"
      },
      "get_network_response": {
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/networks/{id}"
      },
      "get_placementgroup_response": {
        "properties": {
          "placement_group": {
            "properties": {
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "id": {
                "description": "ID of the Placement Group.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "servers": {
                "description": "Array of IDs of Servers that are part of this Placement Group",
                "example": [
                  42
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "type": {
                "description": "Type of the Placement Group",
                "enum": [
                  "spread"
                ],
                "example": "spread",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "type",
              "created",
              "servers"
            ],
            "title": "PlacementGroup",
            "type": "object"
          }
        },
        "required": [
          "placement_group"
        ],
        "title": "PlacementGroupResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/placement_groups/{id}"
      },
      "get_primary_ip_response": {
        "properties": {
          "primary_ip": {
            "properties": {
              "assignee_id": {
                "description": "ID of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                "example": 17,
                "format": "int64",
                "nullable": true,
                "type": "integer"
              },
              "assignee_type": {
                "description": "Type of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                "enum": [
                  "server"
                ],
                "example": "server",
                "type": "string"
              },
              "auto_delete": {
                "default": false,
                "description": "Auto deletion state.\n\nIf enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.\n",
                "example": true,
                "type": "boolean"
              },
              "blocked": {
                "description": "Blocked state of the [Primary IP](#primary-ips).",
                "example": false,
                "type": "boolean"
              },
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "datacenter": {
                "$ref": "#/components/schemas/datacenter"
              },
              "dns_ptr": {
                "description": "List of reverse DNS records.",
                "items": {
                  "$ref": "#/components/schemas/dns_ptr"
                },
                "type": "array"
              },
              "id": {
                "description": "ID of the Primary IP.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "ip": {
                "description": "IP address.",
                "example": "131.232.99.1",
                "type": "string"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "protection": {
                "$ref": "#/components/schemas/protection"
              },
              "type": {
                "$ref": "#/components/schemas/ip_type_optional"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "created",
              "blocked",
              "datacenter",
              "ip",
              "dns_ptr",
              "protection",
              "type",
              "auto_delete",
              "assignee_type",
              "assignee_id"
            ],
            "title": "PrimaryIP",
            "type": "object"
          }
        },
        "required": [
          "primary_ip"
        ],
        "title": "PrimaryIPResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/primary_ips/{id}"
      },
      "get_server_response": {
        "properties": {
          "server": {
            "$ref": "#/components/schemas/server"
          }
        },
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}"
      },
      "get_server_type_response": {
        "properties": {
          "server_type": {
            "$ref": "#/components/schemas/server_type"
          }
        },
        "required": [
          "server_type"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/server_types/{id}"
      },
      "get_ssh_key_response": {
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/ssh_keys/{id}"
      },
      "get_volume_response": {
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          }
        },
        "required": [
          "volume"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes/{id}"
      },
      "http": {
        "description": "Configuration option for protocols http and https",
        "properties": {
          "certificates": {
            "description": "IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.",
            "example": [
              897
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cookie_lifetime": {
            "default": 300,
            "description": "Lifetime of the cookie used for sticky sessions (in seconds).",
            "example": 300,
            "type": "integer"
          },
          "cookie_name": {
            "default": "HCLBSTICKY",
            "description": "Name of the cookie used for sticky sessions.",
            "example": "HCLBSTICKY",
            "type": "string"
          },
          "redirect_http": {
            "default": false,
            "description": "Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.",
            "example": true,
            "type": "boolean"
          },
          "sticky_sessions": {
            "default": false,
            "description": "Use sticky sessions. Only available if `protocol` is `http` or `https`.",
            "example": true,
            "type": "boolean"
          }
        },
        "title": "LoadBalancerServiceHTTP",
        "type": "object"
      },
      "image": {
        "properties": {
          "architecture": {
            "$ref": "#/components/schemas/architecture"
          },
          "bound_to": {
            "description": "ID of Server the Image is bound to. Only set for Images of type `backup`.",
            "example": null,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "created_from": {
            "$ref": "#/components/schemas/created_from"
          },
          "deleted": {
            "description": "Point in time where the Image was deleted (in ISO-8601 format)",
            "example": null,
            "nullable": true,
            "type": "string"
          },
          "deprecated": {
            "description": "Point in time when the Image is considered to be deprecated (in ISO-8601 format)",
            "example": "2018-02-28T00:00:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Image",
            "example": "Ubuntu 20.04 Standard 64 bit",
            "type": "string"
          },
          "disk_size": {
            "description": "Size of the disk contained in the Image in GB",
            "example": 10,
            "type": "number"
          },
          "id": {
            "description": "ID of the Image.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "image_size": {
            "description": "Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.",
            "example": 2.3,
            "nullable": true,
            "type": "number"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Unique identifier of the Image. This value is only set for system Images.",
            "example": "ubuntu-20.04",
            "nullable": true,
            "type": "string"
          },
          "os_flavor": {
            "description": "Flavor of operating system contained in the Image",
            "enum": [
              "alma",
              "centos",
              "debian",
              "fedora",
              "rocky",
              "ubuntu",
              "unknown"
            ],
            "example": "ubuntu",
            "type": "string"
          },
          "os_version": {
            "description": "Operating system version",
            "example": "20.04",
            "nullable": true,
            "type": "string"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "rapid_deploy": {
            "description": "Indicates that rapid deploy of the Image is available",
            "example": false,
            "type": "boolean"
          },
          "status": {
            "description": "Whether the Image can be used or if it's still being created or unavailable",
            "enum": [
              "available",
              "creating",
              "unavailable"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the Image",
            "enum": [
              "app",
              "backup",
              "snapshot",
              "system",
              "temporary"
            ],
            "example": "snapshot",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "name",
          "description",
          "image_size",
          "disk_size",
          "created",
          "created_from",
          "bound_to",
          "os_flavor",
          "os_version",
          "protection",
          "deprecated",
          "deleted",
          "labels",
          "architecture"
        ],
        "type": "object"
      },
      "image_optional": {
        "description": "Image the server is based on.",
        "nullable": true,
        "properties": {
          "architecture": {
            "$ref": "#/components/schemas/architecture"
          },
          "bound_to": {
            "description": "ID of Server the Image is bound to. Only set for Images of type `backup`.",
            "example": null,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "created_from": {
            "$ref": "#/components/schemas/created_from"
          },
          "deleted": {
            "description": "Point in time where the Image was deleted (in ISO-8601 format)",
            "example": null,
            "nullable": true,
            "type": "string"
          },
          "deprecated": {
            "description": "Point in time when the Image is considered to be deprecated (in ISO-8601 format)",
            "example": "2018-02-28T00:00:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Image",
            "example": "Ubuntu 20.04 Standard 64 bit",
            "type": "string"
          },
          "disk_size": {
            "description": "Size of the disk contained in the Image in GB",
            "example": 10,
            "type": "number"
          },
          "id": {
            "description": "ID of the Image.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "image_size": {
            "description": "Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.",
            "example": 2.3,
            "nullable": true,
            "type": "number"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Unique identifier of the Image. This value is only set for system Images.",
            "example": "ubuntu-20.04",
            "nullable": true,
            "type": "string"
          },
          "os_flavor": {
            "description": "Flavor of operating system contained in the Image",
            "enum": [
              "alma",
              "centos",
              "debian",
              "fedora",
              "rocky",
              "ubuntu",
              "unknown"
            ],
            "example": "ubuntu",
            "type": "string"
          },
          "os_version": {
            "description": "Operating system version",
            "example": "20.04",
            "nullable": true,
            "type": "string"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "rapid_deploy": {
            "description": "Indicates that rapid deploy of the Image is available",
            "example": false,
            "type": "boolean"
          },
          "status": {
            "description": "Whether the Image can be used or if it's still being created or unavailable",
            "enum": [
              "available",
              "creating",
              "unavailable"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the Image",
            "enum": [
              "app",
              "backup",
              "snapshot",
              "system",
              "temporary"
            ],
            "example": "snapshot",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "name",
          "description",
          "image_size",
          "disk_size",
          "created",
          "created_from",
          "bound_to",
          "os_flavor",
          "os_version",
          "protection",
          "deprecated",
          "deleted",
          "labels",
          "architecture"
        ],
        "type": "object"
      },
      "ip_type": {
        "description": "The type of the IP",
        "enum": [
          "ipv4",
          "ipv6"
        ],
        "type": "string"
      },
      "ip_type_optional": {
        "description": "[Primary IP](#primary-ips) type.",
        "enum": [
          "ipv4",
          "ipv6"
        ],
        "nullable": true,
        "type": "string"
      },
      "ipv4": {
        "description": "IP address (v4) and its reverse DNS entry of this Server",
        "nullable": true,
        "properties": {
          "blocked": {
            "description": "If the IP is blocked by our anti abuse dept",
            "example": false,
            "type": "boolean"
          },
          "dns_ptr": {
            "description": "Reverse DNS PTR entry for the IPv4 addresses of this Server",
            "example": "server01.example.com",
            "type": "string"
          },
          "id": {
            "description": "ID of the Primary IP.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "ip": {
            "description": "IP address (v4) of this Server",
            "example": "1.2.3.4",
            "type": "string"
          }
        },
        "required": [
          "ip",
          "blocked",
          "dns_ptr"
        ],
        "type": "object"
      },
      "ipv6": {
        "description": "IPv6 network assigned to this Server and its reverse DNS entry",
        "nullable": true,
        "properties": {
          "blocked": {
            "description": "If the IP is blocked by our anti abuse dept",
            "example": false,
            "type": "boolean"
          },
          "dns_ptr": {
            "description": "Reverse DNS PTR entries for the IPv6 addresses of this Server",
            "items": {
              "$ref": "#/components/schemas/dns_ptr"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "ID of the Primary IP.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "ip": {
            "description": "IP address (v6) of this Server",
            "example": "2001:db8::/64",
            "type": "string"
          }
        },
        "required": [
          "ip",
          "blocked",
          "dns_ptr"
        ],
        "type": "object"
      },
      "iso": {
        "properties": {
          "architecture": {
            "$ref": "#/components/schemas/architecture_optional"
          },
          "deprecation": {
            "$ref": "#/components/schemas/deprecation_info"
          },
          "description": {
            "description": "Description of the ISO",
            "example": "FreeBSD 11.0 x64",
            "type": "string"
          },
          "id": {
            "description": "ID of the ISO.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "name": {
            "description": "Unique identifier of the ISO. Only set for public ISOs",
            "example": "FreeBSD-11.0-RELEASE-amd64-dvd1",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Type of the ISO",
            "enum": [
              "private",
              "public"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "deprecation",
          "architecture"
        ],
        "type": "object"
      },
      "iso_optional": {
        "description": "ISO Image that is attached to this Server. Null if no ISO is attached.",
        "nullable": true,
        "properties": {
          "architecture": {
            "$ref": "#/components/schemas/architecture_optional"
          },
          "deprecation": {
            "$ref": "#/components/schemas/deprecation_info"
          },
          "description": {
            "description": "Description of the ISO",
            "example": "FreeBSD 11.0 x64",
            "type": "string"
          },
          "id": {
            "description": "ID of the ISO.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "name": {
            "description": "Unique identifier of the ISO. Only set for public ISOs",
            "example": "FreeBSD-11.0-RELEASE-amd64-dvd1",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Type of the ISO",
            "enum": [
              "private",
              "public"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "deprecation",
          "architecture"
        ],
        "type": "object"
      },
      "label_selector": {
        "description": "Configuration for type LabelSelector, required if type is `label_selector`",
        "properties": {
          "selector": {
            "description": "Label selector | The selector.",
            "example": "env=prod",
            "type": "string"
          }
        },
        "required": [
          "selector"
        ],
        "type": "object"
      },
      "labels": {
        "additionalProperties": {
          "type": "string",
          "pattern": "^(()|[a-z0-9A-Z]|([a-z0-9A-Z][a-z0-9A-Z\\._-]{0,61}[a-z0-9A-Z]))$"
        },
        "description": "User-defined labels (`key/value` pairs) for the Resource.\nFor more information, see \"[Labels](#labels)\".\n",
        "example": {
          "environment": "prod",
          "example.com/my": "label",
          "just-a-key": ""
        },
        "type": "object"
      },
      "list_actions_for_certificate_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/certificates/{id}/actions"
      },
      "list_actions_for_firewall_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/firewalls/{id}/actions"
      },
      "list_actions_for_floating_ip_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}/actions"
      },
      "list_actions_for_image_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/images/{id}/actions"
      },
      "list_actions_for_load_balancer_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/actions"
      },
      "list_actions_for_network_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/networks/{id}/actions"
      },
      "list_actions_for_server_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}/actions"
      },
      "list_actions_for_volume_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes/{id}/actions"
      },
      "list_actions_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "actions",
          "meta"
        ],
        "title": "ActionListResponseWithMeta",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/{resource}/actions/{id}"
      },
      "list_certificates_response": {
        "properties": {
          "certificates": {
            "items": {
              "$ref": "#/components/schemas/certificate"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "certificates",
          "meta"
        ],
        "title": "CertificatesResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/certificates"
      },
      "list_datacenters_response": {
        "properties": {
          "datacenters": {
            "description": "List of [Datacenters](#datacenters).",
            "items": {
              "$ref": "#/components/schemas/datacenter"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "recommendation": {
            "description": "Recommended [Datacenter](#datacenters) for creating new resources.",
            "example": 1,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "datacenters",
          "recommendation",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/datacenters"
      },
      "list_firewalls_response": {
        "properties": {
          "firewalls": {
            "items": {
              "$ref": "#/components/schemas/firewall"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "firewalls",
          "meta"
        ],
        "title": "FirewallsResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/firewalls"
      },
      "list_floating_ips_response": {
        "properties": {
          "floating_ips": {
            "items": {
              "$ref": "#/components/schemas/floating_ip"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "floating_ips",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips"
      },
      "list_images_response": {
        "properties": {
          "images": {
            "items": {
              "$ref": "#/components/schemas/image"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "images",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/images"
      },
      "list_isos_response": {
        "properties": {
          "isos": {
            "items": {
              "$ref": "#/components/schemas/iso"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "isos",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/isos"
      },
      "list_load_balancer_types_response": {
        "properties": {
          "load_balancer_types": {
            "items": {
              "$ref": "#/components/schemas/load_balancer_type"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "load_balancer_types",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancer_types"
      },
      "list_load_balancers_response": {
        "properties": {
          "load_balancers": {
            "items": {
              "$ref": "#/components/schemas/load_balancer"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "load_balancers",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers"
      },
      "list_locations_response": {
        "properties": {
          "locations": {
            "description": "List of [Locations](#locations).",
            "items": {
              "$ref": "#/components/schemas/location"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        },
        "required": [
          "locations",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/locations"
      },
      "list_networks_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "networks": {
            "items": {
              "$ref": "#/components/schemas/network"
            },
            "type": "array"
          }
        },
        "required": [
          "networks",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/networks"
      },
      "list_placementgroups_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "placement_groups": {
            "items": {
              "properties": {
                "created": {
                  "description": "Point in time when the Resource was created (in ISO-8601 format).",
                  "example": "2016-01-30T23:55:00+00:00",
                  "type": "string"
                },
                "id": {
                  "description": "ID of the Placement Group.",
                  "example": 42,
                  "format": "int64",
                  "maximum": 9007199254740991,
                  "type": "integer"
                },
                "labels": {
                  "$ref": "#/components/schemas/labels"
                },
                "name": {
                  "description": "Name of the Resource. Must be unique per Project.",
                  "example": "my-resource",
                  "type": "string"
                },
                "servers": {
                  "description": "Array of IDs of Servers that are part of this Placement Group",
                  "example": [
                    42
                  ],
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "type": "array"
                },
                "type": {
                  "description": "Type of the Placement Group",
                  "enum": [
                    "spread"
                  ],
                  "example": "spread",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name",
                "labels",
                "type",
                "created",
                "servers"
              ],
              "title": "PlacementGroup",
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "placement_groups",
          "meta"
        ],
        "title": "PlacementGroupsResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/placement_groups"
      },
      "list_prices_response": {
        "properties": {
          "pricing": {
            "properties": {
              "currency": {
                "description": "Currency the returned prices are expressed in, coded according to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).",
                "example": "EUR",
                "type": "string"
              },
              "floating_ip": {
                "deprecated": true,
                "description": "Price of [Floating IPs](#floating-ips).\n\n**Deprecated**: This field is deprecated, please refer to the `floating_ips` field instead.\n\nSee the [Changelog](https://docs.hetzner.cloud/changelog#2024-08-29-field-floating_ip-in-pricing-response-is-now-deprecated) for more details.\n",
                "properties": {
                  "price_monthly": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_monthly"
                ],
                "type": "object"
              },
              "floating_ips": {
                "description": "Price of [Floating IPs](#floating-ips) per type and per [Location](#locations).",
                "items": {
                  "properties": {
                    "prices": {
                      "description": "Price of the [Floating IP](#floating-ips) type per [Location](#locations).",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time_monthly"
                      },
                      "type": "array"
                    },
                    "type": {
                      "$ref": "#/components/schemas/ip_type"
                    }
                  },
                  "required": [
                    "type",
                    "prices"
                  ],
                  "type": "object",
                  "title": "ListPricesResponsePricingFloatingIps"
                },
                "type": "array"
              },
              "image": {
                "description": "Price of [Images](#images).",
                "properties": {
                  "price_per_gb_month": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_gb_month"
                ],
                "type": "object"
              },
              "load_balancer_types": {
                "description": "Price of Load Balancer per [type](#load-balancer-types) and per [Location](#locations).",
                "items": {
                  "properties": {
                    "id": {
                      "description": "ID of the [Load Balancer Types](#load-balancer-types) the price is for.",
                      "example": 1,
                      "format": "int64",
                      "type": "integer",
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "description": "Name of the [Load Balancer Types](#load-balancer-types) the price is for.",
                      "example": "lb11",
                      "type": "string"
                    },
                    "prices": {
                      "description": "Price of the [Load Balancer Types](#load-balancer-types) per [Location](#locations).",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "prices"
                  ],
                  "type": "object",
                  "title": "ListPricesResponsePricingLoadBalancerTypes"
                },
                "type": "array"
              },
              "primary_ips": {
                "description": "Price of [Primary IPs](#primary-ips) per type and per [Location](#locations).",
                "items": {
                  "properties": {
                    "prices": {
                      "description": "Price of the [Primary IP](#primary-ips) type per [Location](#locations).",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time_without_traffic"
                      },
                      "type": "array"
                    },
                    "type": {
                      "$ref": "#/components/schemas/ip_type"
                    }
                  },
                  "required": [
                    "type",
                    "prices"
                  ],
                  "type": "object",
                  "title": "ListPricesResponsePricingPrimaryIps"
                },
                "type": "array"
              },
              "server_backup": {
                "description": "Price of [Server](#servers) backups.",
                "properties": {
                  "percentage": {
                    "description": "Price increase of the [Server](#servers) base price in percentage.",
                    "example": "20.00",
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "required": [
                  "percentage"
                ],
                "type": "object"
              },
              "server_types": {
                "description": "Price of Server per [type](#server-types) and per [Location](#locations).",
                "items": {
                  "properties": {
                    "id": {
                      "description": "ID of the [Server Types](#server-types) the price is for.",
                      "example": 104,
                      "format": "int64",
                      "type": "integer",
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "description": "Name of the [Server Types](#server-types) the price is for.",
                      "example": "cpx11",
                      "type": "string"
                    },
                    "prices": {
                      "description": "Price of the [Server Types](#server-types) per [Location](#locations).",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "prices"
                  ],
                  "type": "object",
                  "title": "ListPricesResponsePricingServerTypes"
                },
                "type": "array"
              },
              "traffic": {
                "deprecated": true,
                "description": "**Deprecated**: This field is deprecated and set to `null` since 5 August 2024.\n\nPlease refer to the `price_per_tb_traffic` fields in `server_types` and `load_balancer_types` instead.\n\nLearn more about this change in [the Changelog](https://docs.hetzner.cloud/changelog#2024-07-25-cloud-api-returns-traffic-information-in-different-format).\n",
                "example": null,
                "nullable": true,
                "type": "object"
              },
              "vat_rate": {
                "description": "VAT rate used for calculating prices with VAT.",
                "example": "19.00",
                "format": "decimal",
                "type": "string"
              },
              "volume": {
                "description": "Price of [Volumes](#volumes).",
                "properties": {
                  "price_per_gb_month": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_gb_month"
                ],
                "type": "object"
              }
            },
            "required": [
              "currency",
              "vat_rate",
              "primary_ips",
              "floating_ips",
              "image",
              "volume",
              "server_backup",
              "server_types",
              "load_balancer_types",
              "floating_ip",
              "traffic"
            ],
            "type": "object"
          }
        },
        "required": [
          "pricing"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/pricing"
      },
      "list_primary_ips_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "primary_ips": {
            "items": {
              "properties": {
                "assignee_id": {
                  "description": "ID of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                  "example": 17,
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                },
                "assignee_type": {
                  "description": "Type of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                  "enum": [
                    "server"
                  ],
                  "example": "server",
                  "type": "string"
                },
                "auto_delete": {
                  "default": false,
                  "description": "Auto deletion state.\n\nIf enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.\n",
                  "example": true,
                  "type": "boolean"
                },
                "blocked": {
                  "description": "Blocked state of the [Primary IP](#primary-ips).",
                  "example": false,
                  "type": "boolean"
                },
                "created": {
                  "description": "Point in time when the Resource was created (in ISO-8601 format).",
                  "example": "2016-01-30T23:55:00+00:00",
                  "type": "string"
                },
                "datacenter": {
                  "$ref": "#/components/schemas/datacenter"
                },
                "dns_ptr": {
                  "description": "List of reverse DNS records.",
                  "items": {
                    "$ref": "#/components/schemas/dns_ptr"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "ID of the Primary IP.",
                  "example": 42,
                  "format": "int64",
                  "maximum": 9007199254740991,
                  "type": "integer"
                },
                "ip": {
                  "description": "IP address.",
                  "example": "131.232.99.1",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/labels"
                },
                "name": {
                  "description": "Name of the Resource. Must be unique per Project.",
                  "example": "my-resource",
                  "type": "string"
                },
                "protection": {
                  "$ref": "#/components/schemas/protection"
                },
                "type": {
                  "$ref": "#/components/schemas/ip_type_optional"
                }
              },
              "required": [
                "id",
                "name",
                "labels",
                "created",
                "blocked",
                "datacenter",
                "ip",
                "dns_ptr",
                "protection",
                "type",
                "auto_delete",
                "assignee_type",
                "assignee_id"
              ],
              "title": "PrimaryIP",
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "primary_ips",
          "meta"
        ],
        "title": "PrimaryIPsResponse",
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/primary_ips"
      },
      "list_server_types_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "server_types": {
            "items": {
              "$ref": "#/components/schemas/server_type"
            },
            "type": "array"
          }
        },
        "required": [
          "server_types",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/server_types"
      },
      "list_servers_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "servers": {
            "items": {
              "$ref": "#/components/schemas/server"
            },
            "type": "array"
          }
        },
        "required": [
          "servers",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/servers"
      },
      "list_ssh_keys_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "ssh_keys": {
            "items": {
              "$ref": "#/components/schemas/ssh_key"
            },
            "type": "array"
          }
        },
        "required": [
          "ssh_keys",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/ssh_keys"
      },
      "list_volumes_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/meta"
          },
          "volumes": {
            "items": {
              "$ref": "#/components/schemas/volume"
            },
            "type": "array"
          }
        },
        "required": [
          "volumes",
          "meta"
        ],
        "type": "object",
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes"
      },
      "load_balancer": {
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/load_balancer_algorithm"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "id": {
            "description": "ID of the Load Balancer.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "included_traffic": {
            "description": "Free Traffic for the current billing period in bytes",
            "example": 10000,
            "format": "int64",
            "type": "integer"
          },
          "ingoing_traffic": {
            "description": "Inbound Traffic for the current billing period in bytes",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "load_balancer_type": {
            "$ref": "#/components/schemas/load_balancer_type"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "outgoing_traffic": {
            "description": "Outbound Traffic for the current billing period in bytes",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "private_net": {
            "description": "Private networks information",
            "items": {
              "$ref": "#/components/schemas/load_balancer_private_net"
            },
            "type": "array"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "public_net": {
            "$ref": "#/components/schemas/load_balancer_public_net"
          },
          "services": {
            "description": "List of services that belong to this Load Balancer",
            "items": {
              "$ref": "#/components/schemas/load_balancer_service"
            },
            "type": "array"
          },
          "targets": {
            "description": "List of targets that belong to this Load Balancer",
            "items": {
              "$ref": "#/components/schemas/load_balancer_target"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "public_net",
          "private_net",
          "location",
          "load_balancer_type",
          "protection",
          "labels",
          "created",
          "services",
          "targets",
          "algorithm",
          "outgoing_traffic",
          "ingoing_traffic",
          "included_traffic"
        ],
        "type": "object"
      },
      "load_balancer_add_target": {
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/load_balancer_target_ip"
          },
          "label_selector": {
            "$ref": "#/components/schemas/label_selector"
          },
          "server": {
            "$ref": "#/components/schemas/resource_id"
          },
          "type": {
            "description": "Type of the resource",
            "enum": [
              "ip",
              "label_selector",
              "server"
            ],
            "type": "string"
          },
          "use_private_ip": {
            "default": false,
            "description": "Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ],
        "title": "AddTargetRequest",
        "type": "object",
        "description": "A target to be added to a load balancer."
      },
      "load_balancer_algorithm": {
        "default": {
          "type": "round_robin"
        },
        "description": "Algorithm of the Load Balancer",
        "properties": {
          "type": {
            "default": "round_robin",
            "description": "Type of the algorithm.",
            "enum": [
              "least_connections",
              "round_robin"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "LoadBalancerAlgorithm",
        "type": "object"
      },
      "load_balancer_private_net": {
        "properties": {
          "ip": {
            "description": "IP address (v4) of this Load Balancer in this Network",
            "example": "10.0.0.2",
            "type": "string"
          },
          "network": {
            "description": "ID of the Network",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "load_balancer_public_net": {
        "description": "Public network information",
        "properties": {
          "enabled": {
            "description": "Public Interface enabled or not",
            "type": "boolean"
          },
          "ipv4": {
            "description": "IP address (v4)",
            "properties": {
              "dns_ptr": {
                "description": "Reverse DNS PTR entry for the IPv4 address of this Load Balancer",
                "example": "lb1.example.com",
                "nullable": true,
                "type": "string"
              },
              "ip": {
                "description": "IP address (v4) of this Load Balancer",
                "example": "1.2.3.4",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "ipv6": {
            "description": "IP address (v6)",
            "properties": {
              "dns_ptr": {
                "description": "Reverse DNS PTR entry for the IPv6 address of this Load Balancer",
                "example": "lb1.example.com",
                "nullable": true,
                "type": "string"
              },
              "ip": {
                "description": "IP address (v6) of this Load Balancer",
                "example": "2001:db8::1",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "enabled",
          "ipv4",
          "ipv6"
        ],
        "type": "object"
      },
      "load_balancer_selected_target": {
        "properties": {
          "health_status": {
            "description": "List of health statuses of the services on this target. Only present for target types \"server\" and \"ip\".",
            "items": {
              "$ref": "#/components/schemas/load_balancer_target_health_status"
            },
            "title": "LoadBalancerTargetHealthStatus",
            "type": "array"
          },
          "server": {
            "$ref": "#/components/schemas/resource_id"
          },
          "type": {
            "description": "Type of the resource. Here always \"server\".",
            "example": "server",
            "type": "string"
          },
          "use_private_ip": {
            "default": false,
            "description": "Use the private network IP instead of the public IP. Only present for target types \"server\" and \"label_selector\".",
            "title": "LoadBalancerTargetUsePrivateIP",
            "type": "boolean"
          }
        },
        "title": "LoadBalancerTargetTarget",
        "type": "object",
        "description": "Resolved label selector target Servers. Only present for type \"label_selector\"."
      },
      "load_balancer_service": {
        "properties": {
          "destination_port": {
            "description": "Port the Load Balancer will balance to",
            "example": 80,
            "type": "integer"
          },
          "health_check": {
            "additionalProperties": false,
            "description": "Service health check",
            "properties": {
              "http": {
                "additionalProperties": false,
                "description": "Additional configuration for protocol http",
                "properties": {
                  "domain": {
                    "description": "Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.",
                    "example": "example.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "path": {
                    "description": "HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.",
                    "example": "/",
                    "type": "string"
                  },
                  "response": {
                    "description": "String that must be contained in HTTP response in order to pass the health check",
                    "example": "{\"status\": \"ok\"}",
                    "type": "string"
                  },
                  "status_codes": {
                    "default": [
                      "2??",
                      "3??"
                    ],
                    "description": "List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.",
                    "example": [
                      "2??",
                      "3??"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "tls": {
                    "description": "Use HTTPS for health check",
                    "example": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "domain",
                  "path"
                ],
                "type": "object"
              },
              "interval": {
                "description": "Time interval in seconds health checks are performed",
                "example": 15,
                "type": "integer"
              },
              "port": {
                "description": "Port the health check will be performed on",
                "example": 4711,
                "type": "integer"
              },
              "protocol": {
                "description": "Type of the health check",
                "enum": [
                  "http",
                  "tcp"
                ],
                "example": "http",
                "type": "string"
              },
              "retries": {
                "description": "Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again",
                "example": 3,
                "type": "integer"
              },
              "timeout": {
                "description": "Time in seconds after an attempt is considered a timeout",
                "example": 10,
                "type": "integer"
              }
            },
            "required": [
              "protocol",
              "port",
              "interval",
              "timeout",
              "retries"
            ],
            "title": "LoadBalancerServiceHealthCheck",
            "type": "object"
          },
          "http": {
            "$ref": "#/components/schemas/http"
          },
          "listen_port": {
            "description": "Port the Load Balancer listens on",
            "example": 443,
            "type": "integer"
          },
          "protocol": {
            "description": "Protocol of the Load Balancer",
            "enum": [
              "http",
              "https",
              "tcp"
            ],
            "example": "https",
            "type": "string"
          },
          "proxyprotocol": {
            "description": "Is Proxyprotocol enabled or not",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "protocol",
          "listen_port",
          "destination_port",
          "proxyprotocol",
          "health_check"
        ],
        "title": "LoadBalancerService",
        "type": "object",
        "description": "A service for a Load Balancer."
      },
      "load_balancer_target": {
        "properties": {
          "health_status": {
            "description": "List of health statuses of the services on this target. Only present for target types \"server\" and \"ip\".",
            "items": {
              "$ref": "#/components/schemas/load_balancer_target_health_status"
            },
            "title": "LoadBalancerTargetHealthStatus",
            "type": "array"
          },
          "ip": {
            "$ref": "#/components/schemas/load_balancer_target_ip"
          },
          "label_selector": {
            "$ref": "#/components/schemas/label_selector"
          },
          "server": {
            "$ref": "#/components/schemas/resource_id"
          },
          "targets": {
            "description": "List of resolved label selector target Servers. Only present for type \"label_selector\".",
            "items": {
              "$ref": "#/components/schemas/load_balancer_selected_target"
            },
            "type": "array"
          },
          "type": {
            "description": "Type of the resource",
            "enum": [
              "ip",
              "label_selector",
              "server"
            ],
            "type": "string"
          },
          "use_private_ip": {
            "default": false,
            "description": "Use the private network IP instead of the public IP. Only present for target types \"server\" and \"label_selector\".",
            "title": "LoadBalancerTargetUsePrivateIP",
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ],
        "title": "LoadBalancerTarget",
        "type": "object",
        "description": "A target of a Load Balancer."
      },
      "load_balancer_target_health_status": {
        "properties": {
          "listen_port": {
            "example": 443,
            "type": "integer"
          },
          "status": {
            "enum": [
              "healthy",
              "unhealthy",
              "unknown"
            ],
            "example": "healthy",
            "type": "string"
          }
        },
        "type": "object",
        "description": "Health status of the services on this target. Only present for target types \"server\" and \"ip\"."
      },
      "load_balancer_target_ip": {
        "description": "IP target where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type `ip`. | Configuration for an IP target. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only valid and required if type is `ip`.",
        "properties": {
          "ip": {
            "description": "IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.",
            "example": "203.0.113.1",
            "type": "string"
          }
        },
        "required": [
          "ip"
        ],
        "title": "LoadBalancerTargetIP",
        "type": "object"
      },
      "load_balancer_type": {
        "properties": {
          "deprecated": {
            "description": "Point in time when the Load Balancer type is deprecated (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Load Balancer type",
            "example": "LB11",
            "type": "string"
          },
          "id": {
            "description": "ID of the Load Balancer type",
            "example": 1,
            "format": "int64",
            "type": "integer",
            "maximum": 9007199254740991
          },
          "max_assigned_certificates": {
            "description": "Number of SSL Certificates that can be assigned to a single Load Balancer",
            "example": 10,
            "format": "int64",
            "type": "integer"
          },
          "max_connections": {
            "description": "Number of maximum simultaneous open connections",
            "example": 20000,
            "format": "int64",
            "type": "integer"
          },
          "max_services": {
            "description": "Number of services a Load Balancer of this type can have",
            "example": 5,
            "format": "int64",
            "type": "integer"
          },
          "max_targets": {
            "description": "Number of targets a single Load Balancer can have",
            "example": 25,
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Unique identifier of the Load Balancer type",
            "example": "lb11",
            "type": "string"
          },
          "prices": {
            "description": "Price per [Location](#locations).",
            "items": {
              "$ref": "#/components/schemas/price_per_time"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "max_connections",
          "max_services",
          "max_targets",
          "max_assigned_certificates",
          "deprecated",
          "prices"
        ],
        "type": "object"
      },
      "location": {
        "description": "[Location](#locations) the [Datacenter](#datacenters) is located at.\n | [Location](#locations) the for the [Floating IP](#floating-ips) is located at.\n\nRouting is optimized for this [Location](#locations).\n | Location of the Volume. Volume can only be attached to Servers in the same Location.",
        "properties": {
          "city": {
            "description": "Name of the closest city to the [Location](#locations).\n\nCity name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.\n",
            "example": "Falkenstein",
            "type": "string"
          },
          "country": {
            "description": "Country the [Location](#locations) resides in.\n\nISO 3166-1 alpha-2 code of the country.\n",
            "example": "DE",
            "type": "string"
          },
          "description": {
            "description": "Humand readable description of the [Location](#locations).",
            "example": "Falkenstein DC Park 1",
            "type": "string"
          },
          "id": {
            "description": "ID of the Location.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "latitude": {
            "description": "Latitude of the city closest to the [Location](#locations).",
            "example": 50.47612,
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of the city closest to the [Location](#locations).",
            "example": 12.370071,
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "Unique identifier of the [Location](#locations).",
            "example": "fsn1",
            "pattern": "^[a-z0-9]+(-?[a-z0-9]*)*$",
            "type": "string"
          },
          "network_zone": {
            "description": "Name of the Network Zone this [Location](#locations) resides in.",
            "example": "eu-central",
            "pattern": "^[a-z0-9]+(-?[a-z0-9]*)*$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "country",
          "city",
          "latitude",
          "longitude",
          "network_zone"
        ],
        "type": "object"
      },
      "meta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/pagination"
          }
        },
        "required": [
          "pagination"
        ],
        "title": "ListMeta",
        "type": "object"
      },
      "metrics": {
        "properties": {
          "end": {
            "description": "End of period of metrics reported (in ISO-8601 format)",
            "example": "2017-01-01T23:00:00+00:00",
            "type": "string"
          },
          "start": {
            "description": "Start of period of metrics reported (in ISO-8601 format)",
            "example": "2017-01-01T00:00:00+00:00",
            "type": "string"
          },
          "step": {
            "description": "Resolution of results in seconds.",
            "example": 60,
            "type": "integer"
          },
          "time_series": {
            "additionalProperties": {
              "properties": {
                "values": {
                  "description": "Metrics Timestamps with values",
                  "items": {
                    "items": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "MetricsTimeSeriesValue"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              },
              "required": [
                "values"
              ],
              "type": "object"
            },
            "description": "Hash with timeseries information, containing the name of timeseries as key",
            "example": {
              "name_of_timeseries": {
                "values": [
                  [
                    1435781470.622,
                    "42"
                  ],
                  [
                    1435781471.622,
                    "43"
                  ]
                ]
              }
            },
            "type": "object",
            "title": "MetricsTimeSeries"
          }
        },
        "required": [
          "start",
          "end",
          "step",
          "time_series"
        ],
        "type": "object",
        "description": "You must specify the type of metric to get: open_connections, requests_per_second or bandwidth. You can also specify more than one type by comma separation, e.g. requests_per_second,bandwidth. Depending on the type you will get different time series data."
      },
      "network": {
        "properties": {
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "expose_routes_to_vswitch": {
            "description": "Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "ID of the [Network](#networks).",
            "example": 4711,
            "format": "int64",
            "type": "integer",
            "maximum": 9007199254740991
          },
          "ip_range": {
            "description": "IP range of the [Network](#networks).\nUses CIDR notation.",
            "example": "10.0.0.0/16",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "load_balancers": {
            "description": "Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).",
            "example": [
              42
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the [Network](#networks).",
            "example": "mynet",
            "type": "string"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "routes": {
            "description": "Array of routes set in this [Network](#networks).",
            "items": {
              "$ref": "#/components/schemas/route"
            },
            "type": "array"
          },
          "servers": {
            "description": "Array of IDs of [Servers](#servers) attached to this [Network](#networks).",
            "example": [
              42
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "subnets": {
            "description": "List of subnets allocated in this [Network](#networks).",
            "items": {
              "$ref": "#/components/schemas/subnet_with_gateway"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "ip_range",
          "subnets",
          "routes",
          "servers",
          "protection",
          "labels",
          "created",
          "expose_routes_to_vswitch"
        ],
        "type": "object"
      },
      "pagination": {
        "description": "See \"[Pagination](#pagination)\" for more information.",
        "properties": {
          "last_page": {
            "description": "Page number of the last page available. Can be null if the current page is the last one.",
            "example": 4,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "next_page": {
            "description": "Page number of the next page. Can be null if the current page is the last one.",
            "example": 4,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "page": {
            "description": "Current page number.",
            "example": 3,
            "format": "int64",
            "type": "integer"
          },
          "per_page": {
            "description": "Maximum number of entries returned per page.",
            "example": 25,
            "format": "int64",
            "type": "integer"
          },
          "previous_page": {
            "description": "Page number of the previous page. Can be null if the current page is the first one.",
            "example": 2,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "total_entries": {
            "description": "Total number of entries that exist for this query. Can be null if unknown.",
            "example": 100,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "per_page",
          "previous_page",
          "next_page",
          "last_page",
          "total_entries"
        ],
        "type": "object"
      },
      "power_off_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/poweroff"
      },
      "power_on_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/poweron"
      },
      "price": {
        "description": "Hourly price in this [Location](#locations). | Monthly price in this [Location](#locations). | Additional traffic price per TB in this [Location](#locations). | Price of one [Floating IP](#floating-ips) per month. | Price of [Images](#images) per GB/month. | Price of [Volumes](#volumes) per GB/month.",
        "properties": {
          "gross": {
            "description": "Price with VAT added.",
            "example": "1.1900",
            "format": "decimal",
            "type": "string"
          },
          "net": {
            "description": "Price without VAT.",
            "example": "1.0000",
            "format": "decimal",
            "type": "string"
          }
        },
        "required": [
          "net",
          "gross"
        ],
        "type": "object"
      },
      "price_per_time": {
        "properties": {
          "included_traffic": {
            "description": "Free traffic per month in bytes in this [Location](#locations).",
            "example": 654321,
            "format": "int64",
            "type": "integer"
          },
          "location": {
            "description": "Name of the [Location](#locations) the price is for.",
            "example": "fsn1",
            "type": "string"
          },
          "price_hourly": {
            "$ref": "#/components/schemas/price"
          },
          "price_monthly": {
            "$ref": "#/components/schemas/price"
          },
          "price_per_tb_traffic": {
            "$ref": "#/components/schemas/price"
          }
        },
        "required": [
          "location",
          "price_hourly",
          "price_monthly",
          "included_traffic",
          "price_per_tb_traffic"
        ],
        "type": "object"
      },
      "price_per_time_monthly": {
        "properties": {
          "location": {
            "description": "Name of the [Location](#locations) the price is for.",
            "example": "fsn1",
            "type": "string"
          },
          "price_monthly": {
            "$ref": "#/components/schemas/price"
          }
        },
        "required": [
          "location",
          "price_monthly"
        ],
        "type": "object"
      },
      "price_per_time_without_traffic": {
        "properties": {
          "location": {
            "description": "Name of the [Location](#locations) the price is for.",
            "example": "fsn1",
            "type": "string"
          },
          "price_hourly": {
            "$ref": "#/components/schemas/price"
          },
          "price_monthly": {
            "$ref": "#/components/schemas/price"
          }
        },
        "required": [
          "location",
          "price_hourly",
          "price_monthly"
        ],
        "type": "object"
      },
      "protection": {
        "description": "Protection configuration for the Resource",
        "properties": {
          "delete": {
            "description": "Prevent the Resource from being deleted.",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "delete"
        ],
        "type": "object"
      },
      "rebuild_server_from_image_request": {
        "properties": {
          "image": {
            "description": "ID or name of Image to rebuilt from.",
            "example": "ubuntu-20.04",
            "type": "string"
          }
        },
        "required": [
          "image"
        ],
        "title": "RebuildServerRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/rebuild"
      },
      "rebuild_server_from_image_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "root_password": {
            "description": "New root password when not using SSH keys",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/rebuild"
      },
      "remove_from_placement_group_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/remove_from_placement_group"
      },
      "remove_from_resources_request": {
        "properties": {
          "remove_from": {
            "description": "Resources to remove the [Firewall](#firewalls) from.",
            "items": {
              "$ref": "#/components/schemas/firewall_resource"
            },
            "type": "array"
          }
        },
        "required": [
          "remove_from"
        ],
        "title": "RemoveFromResourcesRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/remove_from_resources"
      },
      "remove_from_resources_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          }
        },
        "required": [
          "actions"
        ],
        "title": "ActionListResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/remove_from_resources"
      },
      "remove_target_request": {
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/load_balancer_target_ip"
          },
          "label_selector": {
            "$ref": "#/components/schemas/label_selector"
          },
          "server": {
            "$ref": "#/components/schemas/resource_id"
          },
          "type": {
            "description": "Type of the resource",
            "enum": [
              "ip",
              "label_selector",
              "server"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "RemoveTargetRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/remove_target"
      },
      "remove_target_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/remove_target"
      },
      "replace_certificate_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New Certificate name",
            "example": "my website cert",
            "type": "string"
          }
        },
        "title": "UpdateCertificateRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/certificates/{id}"
      },
      "replace_certificate_response": {
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificate"
          }
        },
        "required": [
          "certificate"
        ],
        "title": "CertificateResponse",
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/certificates/{id}"
      },
      "replace_firewall_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the [Firewall](#firewalls).\n\nLimited to a maximum of 128 characters.\n\nMust be unique per Project.\n",
            "example": "new-name",
            "type": "string"
          }
        },
        "title": "UpdateFirewallRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/firewalls/{id}"
      },
      "replace_firewall_response": {
        "properties": {
          "firewall": {
            "$ref": "#/components/schemas/firewall"
          }
        },
        "required": [
          "firewall"
        ],
        "title": "FirewallResponse",
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/firewalls/{id}"
      },
      "replace_floating_ip_request": {
        "properties": {
          "description": {
            "description": "Description of the Resource.",
            "example": "This describes my resource",
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          }
        },
        "title": "FloatingIPUpdateRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/floating_ips/{id}"
      },
      "replace_floating_ip_response": {
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          }
        },
        "required": [
          "floating_ip"
        ],
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/floating_ips/{id}"
      },
      "replace_image_request": {
        "properties": {
          "description": {
            "description": "New description of Image",
            "example": "My new Image description",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "type": {
            "description": "Destination Image type to convert to",
            "enum": [
              "snapshot"
            ],
            "type": "string"
          }
        },
        "title": "UpdateImageRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/images/{id}"
      },
      "replace_image_response": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          }
        },
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/images/{id}"
      },
      "replace_load_balancer_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New Load Balancer name",
            "example": "new-name",
            "type": "string"
          }
        },
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/load_balancers/{id}"
      },
      "replace_load_balancer_response": {
        "properties": {
          "load_balancer": {
            "$ref": "#/components/schemas/load_balancer"
          }
        },
        "required": [
          "load_balancer"
        ],
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/load_balancers/{id}"
      },
      "replace_network_request": {
        "properties": {
          "expose_routes_to_vswitch": {
            "description": "Toggle to expose routes to the [Networks](#networks) vSwitch.\n\nIndicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks).\n",
            "example": false,
            "type": "boolean"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New [Network](#networks) name.",
            "example": "new-name",
            "type": "string"
          }
        },
        "title": "NetworkUpdateRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/networks/{id}"
      },
      "replace_network_response": {
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/networks/{id}"
      },
      "replace_placementgroup_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New PlacementGroup name",
            "example": "my Placement Group",
            "type": "string"
          }
        },
        "title": "UpdatePlacementGroupRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/placement_groups/{id}"
      },
      "replace_placementgroup_response": {
        "properties": {
          "placement_group": {
            "properties": {
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "id": {
                "description": "ID of the Placement Group.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "servers": {
                "description": "Array of IDs of Servers that are part of this Placement Group",
                "example": [
                  42
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "type": {
                "description": "Type of the Placement Group",
                "enum": [
                  "spread"
                ],
                "example": "spread",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "type",
              "created",
              "servers"
            ],
            "title": "PlacementGroup",
            "type": "object"
          }
        },
        "required": [
          "placement_group"
        ],
        "title": "PlacementGroupResponse",
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/placement_groups/{id}"
      },
      "replace_primary_ip_request": {
        "properties": {
          "auto_delete": {
            "default": false,
            "description": "Auto deletion state.\n\nIf enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.\n",
            "example": true,
            "type": "boolean"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          }
        },
        "title": "PrimaryIPUpdateRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/primary_ips/{id}"
      },
      "replace_primary_ip_response": {
        "properties": {
          "primary_ip": {
            "properties": {
              "assignee_id": {
                "description": "ID of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                "example": 17,
                "format": "int64",
                "nullable": true,
                "type": "integer"
              },
              "assignee_type": {
                "description": "Type of resource to assign the [Primary IP](#primary-ips) to.\n\n`null` if the [Primary IP](#primary-ips) is not assigned.\n",
                "enum": [
                  "server"
                ],
                "example": "server",
                "type": "string"
              },
              "auto_delete": {
                "default": false,
                "description": "Auto deletion state.\n\nIf enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.\n",
                "example": true,
                "type": "boolean"
              },
              "blocked": {
                "description": "Blocked state of the [Primary IP](#primary-ips).",
                "example": false,
                "type": "boolean"
              },
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "datacenter": {
                "$ref": "#/components/schemas/datacenter"
              },
              "dns_ptr": {
                "description": "List of reverse DNS records.",
                "items": {
                  "$ref": "#/components/schemas/dns_ptr"
                },
                "type": "array"
              },
              "id": {
                "description": "ID of the Primary IP.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "ip": {
                "description": "IP address.",
                "example": "131.232.99.1",
                "type": "string"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "protection": {
                "$ref": "#/components/schemas/protection"
              },
              "type": {
                "$ref": "#/components/schemas/ip_type_optional"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "created",
              "blocked",
              "datacenter",
              "ip",
              "dns_ptr",
              "protection",
              "type",
              "auto_delete",
              "assignee_type",
              "assignee_id"
            ],
            "title": "PrimaryIP",
            "type": "object"
          }
        },
        "required": [
          "primary_ip"
        ],
        "title": "PrimaryIPResponse",
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/primary_ips/{id}"
      },
      "replace_server_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New name to set",
            "example": "my-server",
            "type": "string"
          }
        },
        "title": "UpdateServerRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/servers/{id}"
      },
      "replace_server_response": {
        "properties": {
          "server": {
            "$ref": "#/components/schemas/server"
          }
        },
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/servers/{id}"
      },
      "replace_ssh_key_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New name Name to set",
            "example": "My ssh key",
            "type": "string"
          }
        },
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/ssh_keys/{id}"
      },
      "replace_ssh_key_response": {
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ],
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/ssh_keys/{id}"
      },
      "replace_volume_request": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "New Volume name",
            "example": "database-storage",
            "type": "string"
          }
        },
        "title": "UpdateVolumeRequest",
        "type": "object",
        "description": "Request for PUT https://api.hetzner.cloud/v1/volumes/{id}"
      },
      "replace_volume_response": {
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          }
        },
        "required": [
          "volume"
        ],
        "type": "object",
        "description": "Response to PUT https://api.hetzner.cloud/v1/volumes/{id}"
      },
      "request_console_for_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "password": {
            "description": "VNC password to use for this connection (this password only works in combination with a wss_url with valid token)",
            "example": "9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x",
            "type": "string"
          },
          "wss_url": {
            "description": "URL of websocket proxy to use; this includes a token which is valid for a limited time only",
            "example": "wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c",
            "type": "string"
          }
        },
        "required": [
          "wss_url",
          "password",
          "action"
        ],
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/request_console"
      },
      "reset_root_password_of_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "root_password": {
            "description": "Password that will be set for this Server once the Action succeeds",
            "example": "zCWbFhnu950dUTko5f40",
            "type": "string"
          }
        },
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reset_password"
      },
      "reset_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reset"
      },
      "resize_volume_request": {
        "properties": {
          "size": {
            "description": "New Volume size in GB (must be greater than current size)",
            "example": 50,
            "type": "number"
          }
        },
        "required": [
          "size"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize"
      },
      "resize_volume_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize"
      },
      "resource": {
        "properties": {
          "id": {
            "description": "ID of the Resource. | ID of resource referenced",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "type": {
            "description": "Type of the Resource. | Type of resource referenced",
            "example": "server",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "resource_id": {
        "description": "ID of the Resource",
        "properties": {
          "id": {
            "description": "ID of the Server. | ID of the [Server](#servers). | ID of the Server",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "retry_issuance_or_renewal_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/certificates/{id}/actions/retry"
      },
      "route": {
        "properties": {
          "destination": {
            "description": "Destination network or host of the route.\n\nPackages addressed for IPs matching the destination IP prefix will be send to the specified gateway.\n\nMust be one of\n* private IPv4 ranges of RFC1918\n* or `0.0.0.0/0`.\n\nMust not overlap with\n* an existing ip_range in any subnets\n* or with any destinations in other routes\n* or with `172.31.1.1`.\n\n`172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).\n",
            "example": "10.100.1.0/24",
            "type": "string"
          },
          "gateway": {
            "description": "Gateway of the route.\n\nPackages addressed for the specified destination will be send to this IP address.\n\nCannot be\n* the first IP of the networks ip_range,\n* an IP behind a vSwitch or\n* `172.31.1.1`.\n\n`172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).\n",
            "example": "10.0.1.1",
            "type": "string"
          }
        },
        "required": [
          "destination",
          "gateway"
        ],
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route | Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route"
      },
      "rule": {
        "properties": {
          "description": {
            "description": "Description of the rule.",
            "maxLength": 255,
            "nullable": true,
            "type": "string"
          },
          "destination_ips": {
            "description": "List of permitted IPv4/IPv6 addresses for outgoing traffic.\n\nThe `direction` must be set to `out`.\n\nIPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR\nblocks at most.\n\nThe CIDR blocks may refer to networks (with empty host bits) or single hosts.\nFor example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,\nand a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.\n\nUse `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.\n",
            "example": [],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "direction": {
            "description": "Traffic direction in which the rule should be applied to.\n\nUse `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.\n",
            "enum": [
              "in",
              "out"
            ],
            "example": "in",
            "type": "string"
          },
          "port": {
            "description": "Port or port range to apply the rule for.\n\nOnly applicable for protocols `tcp` and `udp`.\n\nA port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include\nall ports starting from 1024 up to port 5000.\n",
            "example": "80",
            "type": "string",
            "nullable": true
          },
          "protocol": {
            "description": "Network protocol to apply the rule for.",
            "enum": [
              "esp",
              "gre",
              "icmp",
              "tcp",
              "udp"
            ],
            "type": "string"
          },
          "source_ips": {
            "description": "List of permitted IPv4/IPv6 addresses for incoming traffic.\n\nThe `direction` must be set to `in`.\n\nIPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR\nblocks at most.\n\nThe CIDR blocks may refer to networks (with empty host bits) or single hosts.\nFor example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,\nand a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.\n\nUse `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.\n",
            "example": [
              "28.239.13.1/32",
              "28.239.14.0/24",
              "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "direction",
          "protocol"
        ],
        "title": "Rule",
        "type": "object",
        "description": "Rule of a firewall."
      },
      "server": {
        "properties": {
          "backup_window": {
            "description": "Time window (UTC) in which the backup will run, or null if the backups are not enabled",
            "example": "22-02",
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "datacenter": {
            "$ref": "#/components/schemas/datacenter"
          },
          "id": {
            "description": "ID of the Server.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "image": {
            "$ref": "#/components/schemas/image_optional"
          },
          "included_traffic": {
            "description": "Free Traffic for the current billing period in bytes",
            "example": 654321,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "ingoing_traffic": {
            "description": "Inbound Traffic for the current billing period in bytes",
            "example": 123456,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "iso": {
            "$ref": "#/components/schemas/iso_optional"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "load_balancers": {
            "description": "Load Balancer IDs assigned to the server.",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "locked": {
            "description": "True if Server has been locked and is not available to user",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)",
            "example": "my-resource",
            "type": "string"
          },
          "outgoing_traffic": {
            "description": "Outbound Traffic for the current billing period in bytes",
            "example": 123456,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "placement_group": {
            "description": "The placement group the server is assigned to.",
            "nullable": true,
            "properties": {
              "created": {
                "description": "Point in time when the Resource was created (in ISO-8601 format).",
                "example": "2016-01-30T23:55:00+00:00",
                "type": "string"
              },
              "id": {
                "description": "ID of the Placement Group.",
                "example": 42,
                "format": "int64",
                "maximum": 9007199254740991,
                "type": "integer"
              },
              "labels": {
                "$ref": "#/components/schemas/labels"
              },
              "name": {
                "description": "Name of the Resource. Must be unique per Project.",
                "example": "my-resource",
                "type": "string"
              },
              "servers": {
                "description": "Array of IDs of Servers that are part of this Placement Group",
                "example": [
                  42
                ],
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "type": {
                "description": "Type of the Placement Group",
                "enum": [
                  "spread"
                ],
                "example": "spread",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "labels",
              "type",
              "created",
              "servers"
            ],
            "title": "PlacementGroupNullable",
            "type": "object"
          },
          "primary_disk_size": {
            "description": "Size of the primary Disk",
            "example": 50,
            "type": "integer"
          },
          "private_net": {
            "description": "Private networks information",
            "items": {
              "$ref": "#/components/schemas/server_private_net"
            },
            "type": "array"
          },
          "protection": {
            "$ref": "#/components/schemas/server_protection"
          },
          "public_net": {
            "$ref": "#/components/schemas/server_public_net"
          },
          "rescue_enabled": {
            "description": "True if rescue mode is enabled. Server will then boot into rescue system on next reboot",
            "example": false,
            "type": "boolean"
          },
          "server_type": {
            "$ref": "#/components/schemas/server_type"
          },
          "status": {
            "description": "Status of the Server",
            "enum": [
              "deleting",
              "initializing",
              "migrating",
              "off",
              "rebuilding",
              "running",
              "starting",
              "stopping",
              "unknown"
            ],
            "type": "string"
          },
          "volumes": {
            "description": "IDs of Volumes assigned to this Server",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "created",
          "public_net",
          "private_net",
          "server_type",
          "datacenter",
          "image",
          "iso",
          "rescue_enabled",
          "locked",
          "backup_window",
          "outgoing_traffic",
          "ingoing_traffic",
          "included_traffic",
          "protection",
          "labels",
          "primary_disk_size"
        ],
        "type": "object",
        "description": "Servers are virtual machines that can be provisioned."
      },
      "server_private_net": {
        "properties": {
          "alias_ips": {
            "description": "Additional IP addresses of the server on the network.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ip": {
            "description": "The server IP address on the network.",
            "example": "10.0.0.2",
            "type": "string"
          },
          "mac_address": {
            "description": "The server MAC address on the network.",
            "example": "86:00:ff:2a:7d:e1",
            "type": "string"
          },
          "network": {
            "description": "The Network ID the server is attached to.",
            "example": 4711,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "server_protection": {
        "description": "Protection configuration for the Server",
        "properties": {
          "delete": {
            "description": "If true, prevents the Server from being deleted",
            "example": false,
            "type": "boolean"
          },
          "rebuild": {
            "description": "If true, prevents the Server from being rebuilt",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "delete",
          "rebuild"
        ],
        "type": "object"
      },
      "server_public_net": {
        "description": "Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`",
        "properties": {
          "firewalls": {
            "description": "Firewalls applied to the public network interface of this Server",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the Firewall.",
                  "example": 42,
                  "format": "int64",
                  "maximum": 9007199254740991,
                  "type": "integer"
                },
                "status": {
                  "description": "Status of the Firewall on the Server",
                  "enum": [
                    "applied",
                    "pending"
                  ],
                  "example": "applied",
                  "type": "string"
                }
              },
              "title": "ServerPublicNetFirewall",
              "type": "object"
            },
            "type": "array"
          },
          "floating_ips": {
            "description": "IDs of Floating IPs assigned to this Server",
            "example": [
              478
            ],
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          }
        },
        "required": [
          "ipv4",
          "ipv6",
          "floating_ips"
        ],
        "type": "object"
      },
      "server_type": {
        "properties": {
          "architecture": {
            "$ref": "#/components/schemas/architecture"
          },
          "cores": {
            "description": "Number of cpu cores a Server of this type will have",
            "example": 2,
            "type": "integer"
          },
          "cpu_type": {
            "description": "Type of cpu",
            "enum": [
              "dedicated",
              "shared"
            ],
            "example": "shared",
            "type": "string"
          },
          "deprecated": {
            "description": "This field is deprecated. Use the deprecation object instead",
            "example": false,
            "type": "boolean",
            "nullable": true
          },
          "deprecation": {
            "$ref": "#/components/schemas/deprecation_info"
          },
          "description": {
            "description": "Description of the Server type",
            "example": "CPX11",
            "type": "string"
          },
          "disk": {
            "description": "Disk size a Server of this type will have in GB",
            "example": 40,
            "type": "number"
          },
          "id": {
            "description": "ID of the Server type",
            "example": 1,
            "format": "int64",
            "type": "integer",
            "maximum": 9007199254740991
          },
          "included_traffic": {
            "deprecated": true,
            "description": "**Deprecated**: This field is deprecated and set to `null` since 5 August 2024.\nPlease refer to the `included_traffic` field in `prices` instead.\nLearn more about this change in [the Changelog](https://docs.hetzner.cloud/changelog#2024-07-25-cloud-api-returns-traffic-information-in-different-format).\n",
            "example": null,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "memory": {
            "description": "Memory a Server of this type will have in GB",
            "example": 2,
            "type": "number"
          },
          "name": {
            "description": "Unique identifier of the Server type",
            "example": "cpx11",
            "type": "string"
          },
          "prices": {
            "description": "Price per [Location](#locations).",
            "items": {
              "$ref": "#/components/schemas/price_per_time"
            },
            "type": "array"
          },
          "storage_type": {
            "description": "Type of Server boot drive. Local has higher speed. Network has better availability.",
            "enum": [
              "local",
              "network"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "cores",
          "memory",
          "disk",
          "deprecated",
          "prices",
          "storage_type",
          "cpu_type",
          "architecture",
          "included_traffic"
        ],
        "type": "object"
      },
      "set_rules_request": {
        "properties": {
          "rules": {
            "description": "Array of rules.\n\nRules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits).\n\nExisting rules will be replaced.\n",
            "items": {
              "$ref": "#/components/schemas/rule"
            },
            "maxItems": 50,
            "type": "array"
          }
        },
        "required": [
          "rules"
        ],
        "title": "SetRulesRequest",
        "type": "object",
        "description": "Request for POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/set_rules"
      },
      "set_rules_response": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/action"
            },
            "type": "array"
          }
        },
        "required": [
          "actions"
        ],
        "title": "ActionListResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/set_rules"
      },
      "shutdown_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/shutdown"
      },
      "soft_reboot_server_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reboot"
      },
      "ssh_key": {
        "properties": {
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "fingerprint": {
            "description": "Fingerprint of public key",
            "example": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
            "type": "string"
          },
          "id": {
            "description": "ID of the SSH Key.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "public_key": {
            "description": "Public key",
            "example": "ssh-rsa AAAjjk76kgf...Xt",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "fingerprint",
          "public_key",
          "labels",
          "created"
        ],
        "type": "object",
        "description": "SSH keys are public keys you provide to the cloud system. They can be injected into Servers at creation time. We highly recommend that you use keys instead of passwords to manage your Servers."
      },
      "subnet": {
        "properties": {
          "ip_range": {
            "description": "IP range of the subnet.\n\nUses CIDR notation.\n\nMust be a subnet of the parent [Networks](#networks) `ip_range`.\n\nMust not overlap with any other subnets or with any destinations in routes.\n\nMinimum network size is /30. We highly recommend that you pick a larger subnet with a /24 netmask.\n",
            "example": "10.0.1.0/24",
            "type": "string"
          },
          "network_zone": {
            "description": "Name of the [Network Zone](#network-zones).\n\nThe [Location](#locations) contains the `network_zone` property it belongs to.\n | Name of the [Network Zone](#network-zones).\n\nThe [Location](#locations) contains the `network_zone` it belongs to.\n",
            "example": "eu-central",
            "type": "string"
          },
          "type": {
            "description": "Type of subnet.\n\n- `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).\n- `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.\n- `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).\n",
            "enum": [
              "cloud",
              "server",
              "vswitch"
            ],
            "type": "string"
          },
          "vswitch_id": {
            "description": "ID of the robot vSwitch.\n\nMust only be supplied for subnets of type `vswitch`.\n | ID of the robot vSwitch.\n\nMust be supplied if the subnet is of type `vswitch`.\n",
            "example": 1000,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "type",
          "network_zone"
        ],
        "type": "object",
        "description": "Subnets divide the ip_range from the parent Network object into multiple Subnetworks that you can use for different specific purposes."
      },
      "subnet_with_gateway": {
        "properties": {
          "gateway": {
            "description": "Gateway for [Servers](#servers) attached to this subnet.\n\nFor subnets of type `server` this is always the first IP of the subnets IP range.\n",
            "example": "10.0.0.1",
            "type": "string"
          },
          "ip_range": {
            "description": "IP range of the subnet.\n\nUses CIDR notation.\n",
            "example": "10.0.1.0/24",
            "type": "string"
          },
          "network_zone": {
            "description": "Name of the [Network Zone](#network-zones).\n\nThe [Location](#locations) contains the `network_zone` property it belongs to.\n",
            "example": "eu-central",
            "type": "string"
          },
          "type": {
            "description": "Type of subnet.\n\n- `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).\n- `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.\n- `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).\n",
            "enum": [
              "cloud",
              "server",
              "vswitch"
            ],
            "type": "string"
          },
          "vswitch_id": {
            "description": "ID of the robot vSwitch if the subnet is of type `vswitch`.",
            "example": 1000,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "type",
          "network_zone",
          "gateway"
        ],
        "type": "object"
      },
      "unassign_floating_ip_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/unassign"
      },
      "unassign_primary_ip_from_resource_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/unassign"
      },
      "update_load_balancer_service": {
        "properties": {
          "destination_port": {
            "description": "Port the Load Balancer will balance to",
            "example": 80,
            "type": "integer"
          },
          "health_check": {
            "additionalProperties": false,
            "description": "Service health check",
            "properties": {
              "http": {
                "additionalProperties": false,
                "description": "Additional configuration for protocol http",
                "properties": {
                  "domain": {
                    "description": "Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.",
                    "example": "example.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "path": {
                    "description": "HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.",
                    "example": "/",
                    "type": "string"
                  },
                  "response": {
                    "description": "String that must be contained in HTTP response in order to pass the health check",
                    "example": "{\"status\": \"ok\"}",
                    "type": "string"
                  },
                  "status_codes": {
                    "default": [
                      "2??",
                      "3??"
                    ],
                    "description": "List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.",
                    "example": [
                      "2??",
                      "3??"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "tls": {
                    "description": "Use HTTPS for health check",
                    "example": false,
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "interval": {
                "description": "Time interval in seconds health checks are performed",
                "example": 15,
                "type": "integer"
              },
              "port": {
                "description": "Port the health check will be performed on",
                "example": 4711,
                "type": "integer"
              },
              "protocol": {
                "description": "Type of the health check",
                "enum": [
                  "http",
                  "tcp"
                ],
                "example": "http",
                "type": "string"
              },
              "retries": {
                "description": "Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again",
                "example": 3,
                "type": "integer"
              },
              "timeout": {
                "description": "Time in seconds after an attempt is considered a timeout",
                "example": 10,
                "type": "integer"
              }
            },
            "title": "UpdateLoadBalancerServiceHealthCheck",
            "type": "object"
          },
          "http": {
            "$ref": "#/components/schemas/http"
          },
          "listen_port": {
            "description": "Port the Load Balancer listens on",
            "example": 443,
            "type": "integer"
          },
          "protocol": {
            "description": "Protocol of the Load Balancer",
            "enum": [
              "http",
              "https",
              "tcp"
            ],
            "example": "https",
            "type": "string"
          },
          "proxyprotocol": {
            "description": "Is Proxyprotocol enabled or not",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "listen_port"
        ],
        "title": "UpdateLoadBalancerService",
        "type": "object",
        "description": "An update to a service for a Load Balancer."
      },
      "update_service_request": {
        "$ref": "#/components/schemas/update_load_balancer_service"
      },
      "update_service_response": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "title": "ActionResponse",
        "type": "object",
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/update_service"
      },
      "volume": {
        "properties": {
          "created": {
            "description": "Point in time when the Resource was created (in ISO-8601 format).",
            "example": "2016-01-30T23:55:00+00:00",
            "type": "string"
          },
          "format": {
            "description": "Filesystem of the Volume if formatted on creation, null if not formatted on creation",
            "example": "xfs",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the Volume.",
            "example": 42,
            "format": "int64",
            "maximum": 9007199254740991,
            "type": "integer"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "linux_device": {
            "description": "Device path on the file system for the Volume",
            "example": "/dev/disk/by-id/scsi-0HC_Volume_4711",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "name": {
            "description": "Name of the Resource. Must be unique per Project.",
            "example": "my-resource",
            "type": "string"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "server": {
            "description": "ID of the Server the Volume is attached to, null if it is not attached at all",
            "example": 12,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "description": "Size in GB of the Volume",
            "example": 42,
            "type": "number"
          },
          "status": {
            "description": "Current status of the Volume",
            "enum": [
              "available",
              "creating"
            ],
            "example": "available",
            "type": "string"
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "server",
          "location",
          "size",
          "linux_device",
          "protection",
          "labels",
          "status",
          "format"
        ],
        "type": "object",
        "description": "A Volume is a highly-available, scalable, and SSD-based block storage for Servers. Pricing for Volumes depends on the Volume size and Location, not the actual used storage. Please see [Hetzner Wiki](https://wiki.hetzner.de/index.php/CloudServer/en#Volumes) for more details about Volumes."
      }
    },
    "securitySchemes": {
      "APIToken": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "paths": {
    "/actions": {
      "get": {
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "actions"
        ],
        "operationId": "list_actions"
      }
    },
    "/actions/{id}": {
      "get": {
        "description": "Returns a specific Action object.",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action",
        "tags": [
          "actions"
        ],
        "operationId": "get_action"
      }
    },
    "/certificates": {
      "get": {
        "description": "Returns all Certificate objects.",
        "parameters": [
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times. The response will only contain Certificates matching the type.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "uploaded",
                "managed"
              ],
              "title": "ParameterType",
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "certificates": [
                    {
                      "certificate": "-----BEGIN CERTIFICATE-----\n...",
                      "created": "2019-01-08T12:10:00+00:00",
                      "domain_names": [
                        "example.com",
                        "webmail.example.com",
                        "www.example.com"
                      ],
                      "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                      "id": 897,
                      "labels": {
                        "env": "dev"
                      },
                      "name": "my website cert",
                      "not_valid_after": "2019-07-08T09:59:59+00:00",
                      "not_valid_before": "2019-01-08T10:00:00+00:00",
                      "status": null,
                      "type": "uploaded",
                      "used_by": [
                        {
                          "id": 4711,
                          "type": "load_balancer"
                        }
                      ]
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_certificates_response"
                }
              }
            },
            "description": "The `certificates` key contains an array of Certificate objects"
          }
        },
        "summary": "Get all Certificates",
        "tags": [
          "certificates"
        ],
        "operationId": "list_certificates"
      },
      "post": {
        "description": "Creates a new Certificate.\n\nThe default type **uploaded** allows for uploading your existing `certificate` and `private_key` in PEM format. You have to monitor its expiration date and handle renewal yourself.\n\nIn contrast, type **managed** requests a new Certificate from *Let's Encrypt* for the specified `domain_names`. Only domains managed by *Hetzner DNS* are supported. We handle renewal and timely alert the project owner via email if problems occur.\n\nFor type `managed` Certificates the `action` key of the response contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "managed": {
                  "summary": "Creating a type `managed` Certificate",
                  "value": {
                    "domain_names": [
                      "example.com",
                      "webmail.example.com",
                      "www.example.com"
                    ],
                    "name": "my website cert",
                    "type": "managed"
                  }
                },
                "uploaded": {
                  "summary": "Creating a type `uploaded` Certificate",
                  "value": {
                    "certificate": "-----BEGIN CERTIFICATE-----\n...",
                    "name": "my website cert",
                    "private_key": "-----BEGIN PRIVATE KEY-----\n...",
                    "type": "uploaded"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/create_certificate_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "managed": {
                    "summary": "Response when creating a type `managed` Certificate",
                    "value": {
                      "action": {
                        "command": "create_certificate",
                        "error": {
                          "code": "action_failed",
                          "message": "Action failed"
                        },
                        "finished": null,
                        "id": 13,
                        "progress": 0,
                        "resources": [
                          {
                            "id": 879,
                            "type": "certificate"
                          }
                        ],
                        "started": "2019-01-08T12:10:00+00:00",
                        "status": "running"
                      },
                      "certificate": {
                        "certificate": null,
                        "created": "2019-01-08T12:10:00+00:00",
                        "domain_names": [
                          "example.com",
                          "webmail.example.com",
                          "www.example.com"
                        ],
                        "fingerprint": null,
                        "id": 897,
                        "labels": {
                          "env": "dev"
                        },
                        "name": "my website cert",
                        "not_valid_after": null,
                        "not_valid_before": null,
                        "status": {
                          "error": null,
                          "issuance": "pending",
                          "renewal": "unavailable"
                        },
                        "type": "managed",
                        "used_by": [
                          {
                            "id": 4711,
                            "type": "load_balancer"
                          }
                        ]
                      }
                    }
                  },
                  "uploaded": {
                    "summary": "Response when creating a type `uploaded` Certificate",
                    "value": {
                      "action": null,
                      "certificate": {
                        "certificate": "-----BEGIN CERTIFICATE-----\n...",
                        "created": "2019-01-08T12:10:00+00:00",
                        "domain_names": [
                          "example.com",
                          "webmail.example.com",
                          "www.example.com"
                        ],
                        "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                        "id": 897,
                        "labels": {
                          "env": "dev"
                        },
                        "name": "my website cert",
                        "not_valid_after": "2019-07-08T09:59:59+00:00",
                        "not_valid_before": "2019-01-08T10:00:00+00:00",
                        "status": null,
                        "type": "uploaded",
                        "used_by": [
                          {
                            "id": 4711,
                            "type": "load_balancer"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_certificate_response"
                }
              }
            },
            "description": "The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null."
          }
        },
        "summary": "Create a Certificate",
        "tags": [
          "certificates"
        ],
        "operationId": "create_certificate"
      }
    },
    "/certificates/{id}": {
      "delete": {
        "description": "Deletes a Certificate.",
        "parameters": [
          {
            "description": "ID of the Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Certificate.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Certificate deleted"
          }
        },
        "summary": "Delete a Certificate",
        "tags": [
          "certificates"
        ],
        "operationId": "delete_certificate"
      },
      "get": {
        "description": "Gets a specific Certificate object.",
        "parameters": [
          {
            "description": "ID of the Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Certificate.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "certificate": {
                    "certificate": "-----BEGIN CERTIFICATE-----\n...",
                    "created": "2019-01-08T12:10:00+00:00",
                    "domain_names": [
                      "example.com",
                      "webmail.example.com",
                      "www.example.com"
                    ],
                    "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                    "id": 897,
                    "labels": {
                      "env": "dev"
                    },
                    "name": "my website cert",
                    "not_valid_after": "2019-07-08T09:59:59+00:00",
                    "not_valid_before": "2019-01-08T10:00:00+00:00",
                    "status": null,
                    "type": "uploaded",
                    "used_by": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ]
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_certificate_response"
                }
              }
            },
            "description": "The `certificate` key contains a Certificate object"
          }
        },
        "summary": "Get a Certificate",
        "tags": [
          "certificates"
        ],
        "operationId": "get_certificate"
      },
      "put": {
        "description": "Updates the Certificate properties.\n\nNote that when updating labels, the Certificate’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n\nNote: if the Certificate object changes during the request, the response will be a “conflict” error.\n",
        "parameters": [
          {
            "description": "ID of the Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Certificate.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_certificate_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "certificate": {
                    "certificate": "-----BEGIN CERTIFICATE-----\n...",
                    "created": "2019-01-08T12:10:00+00:00",
                    "domain_names": [
                      "example.com",
                      "webmail.example.com",
                      "www.example.com"
                    ],
                    "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                    "id": 897,
                    "labels": {
                      "labelkey": "value"
                    },
                    "name": "my website cert",
                    "not_valid_after": "2019-07-08T09:59:59+00:00",
                    "not_valid_before": "2019-01-08T10:00:00+00:00",
                    "status": null,
                    "type": "uploaded",
                    "used_by": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ]
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_certificate_response"
                }
              }
            },
            "description": "The `certificate` key contains the Certificate that was just updated"
          }
        },
        "summary": "Update a Certificate",
        "tags": [
          "certificates"
        ],
        "operationId": "replace_certificate"
      }
    },
    "/certificates/{id}/actions": {
      "get": {
        "description": "Returns all Action objects for a Certificate. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.\n\nOnly type `managed` Certificates can have Actions. For type `uploaded` Certificates the `actions` key will always contain an empty array.\n",
        "parameters": [
          {
            "description": "ID of the Certificate",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Certificate. Limited to 52 bits to ensure compatability with JSON double precision floats.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer",
              "title": "Certificate ID"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "issue_certificate",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2021-01-30T23:57:00+00:00",
                      "id": 14,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 896,
                          "type": "certificate"
                        }
                      ],
                      "started": "2021-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_certificate_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions for a Certificate",
        "tags": [
          "certificates"
        ],
        "operationId": "list_actions_for_certificate"
      }
    },
    "/certificates/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific Action for a Certificate. Only type `managed` Certificates have Actions.",
        "parameters": [
          {
            "description": "ID of the Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Certificate.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "issue_certificate",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2021-01-30T23:57:00+00:00",
                    "id": 14,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 896,
                        "type": "certificate"
                      }
                    ],
                    "started": "2021-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_certificate_response"
                }
              }
            },
            "description": "The `action` key contains the Certificate Action"
          }
        },
        "summary": "Get an Action for a Certificate",
        "tags": [
          "certificates"
        ],
        "operationId": "get_action_for_certificate"
      }
    },
    "/certificates/{id}/actions/retry": {
      "post": {
        "description": "Retry a failed Certificate issuance or renewal.\n\nOnly applicable if the type of the Certificate is `managed` and the issuance or renewal status is `failed`.\n\n#### Call specific error codes\n\n| Code                                                    | Description                                                               |\n|---------------------------------------------------------|---------------------------------------------------------------------------|\n| `caa_record_does_not_allow_ca`                          | CAA record does not allow certificate authority                           |\n| `ca_dns_validation_failed`                              | Certificate Authority: DNS validation failed                              |\n| `ca_too_many_authorizations_failed_recently`            | Certificate Authority: Too many authorizations failed recently            |\n| `ca_too_many_certificates_issued_for_registered_domain` | Certificate Authority: Too many certificates issued for registered domain |\n| `ca_too_many_duplicate_certificates`                    | Certificate Authority: Too many duplicate certificates                    |\n| `could_not_verify_domain_delegated_to_zone`             | Could not verify domain delegated to zone                                 |\n| `dns_zone_not_found`                                    | DNS zone not found                                                        |\n| `dns_zone_is_secondary_zone`                            | DNS zone is a secondary zone                                              |\n",
        "parameters": [
          {
            "description": "ID of the Certificate.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Certificate.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "issue_certificate",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2021-01-30T23:57:00+00:00",
                    "id": 14,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 896,
                        "type": "certificate"
                      }
                    ],
                    "started": "2021-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/retry_issuance_or_renewal_response"
                }
              }
            },
            "description": "The `action` key contains the resulting Action"
          }
        },
        "summary": "Retry Issuance or Renewal",
        "tags": [
          "certificates"
        ],
        "operationId": "retry_issuance_or_renewal"
      }
    },
    "/certificates/actions": {
      "get": {
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "certificates"
        ],
        "operationId": "list_certificate_actions"
      }
    },
    "/certificates/actions/{id}": {
      "get": {
        "description": "Returns a specific Action object.",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action",
        "tags": [
          "certificates"
        ],
        "operationId": "get_certificate_action"
      }
    },
    "/datacenters": {
      "get": {
        "description": "Returns all [Datacenters](#datacenters).",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_datacenters_response"
                }
              }
            },
            "description": "Contains the queried [Datacenters](#datacenters)."
          }
        },
        "summary": "Get all Datacenters",
        "tags": [
          "datacenters"
        ],
        "operationId": "list_datacenters"
      }
    },
    "/datacenters/{id}": {
      "get": {
        "description": "Returns a single [Datacenter](#datacenters).",
        "parameters": [
          {
            "description": "ID of the Datacenter.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Datacenter.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_datacenter_response"
                }
              }
            },
            "description": "Contains the queried [Datacenter](#datacenters)."
          }
        },
        "summary": "Get a Datacenter",
        "tags": [
          "datacenters"
        ],
        "operationId": "get_datacenter"
      }
    },
    "/firewalls": {
      "get": {
        "description": "Returns all [Firewalls](#firewalls).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_firewalls_response"
                }
              }
            },
            "description": "The `firewalls` key contains the [Firewalls](#firewalls)."
          }
        },
        "summary": "Get all Firewalls",
        "tags": [
          "firewalls"
        ],
        "operationId": "list_firewalls"
      },
      "post": {
        "description": "Create a [Firewall](#firewalls).\n\n#### Error Codes specific to this Call\n\n| Code                          | Description                                                                 |\n|------------------------------ |-----------------------------------------------------------------------------|\n| `server_already_added`        | [Server](#servers) applied more than once                                   |\n| `incompatible_network_type`   | The resources network type is not supported by [Firewalls](#firewalls)      |\n| `firewall_resource_not_found` | The resource the [Firewall](#firewalls) should be attached to was not found |\n",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "value": {
                    "apply_to": [
                      {
                        "server": {
                          "id": 42
                        },
                        "type": "server"
                      }
                    ],
                    "labels": {
                      "env": "dev"
                    },
                    "name": "Corporate Intranet Protection",
                    "rules": [
                      {
                        "description": "Allow port 80",
                        "direction": "in",
                        "port": "80",
                        "protocol": "tcp",
                        "source_ips": [
                          "28.239.13.1/32",
                          "28.239.14.0/24",
                          "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                        ]
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/create_firewall_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_firewall_response"
                }
              }
            },
            "description": "The `firewall` key contains the created [Firewall](#firewalls)."
          }
        },
        "summary": "Create a Firewall",
        "tags": [
          "firewalls"
        ],
        "operationId": "create_firewall"
      }
    },
    "/firewalls/{id}": {
      "delete": {
        "description": "Deletes the [Firewall](#firewalls).\n\n#### Error Codes specific to this Call\n\n| Code                 | Description                                        |\n|--------------------- |----------------------------------------------------|\n| `resource_in_use`    | [Firewall](#firewalls) still applied to a resource |\n",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Firewall deleted"
          }
        },
        "summary": "Delete a Firewall",
        "tags": [
          "firewalls"
        ],
        "operationId": "delete_firewall"
      },
      "get": {
        "description": "Returns a single [Firewall](#firewalls).",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_firewall_response"
                }
              }
            },
            "description": "The `firewall` key contains the [Firewall](#firewalls)."
          }
        },
        "summary": "Get a Firewall",
        "tags": [
          "firewalls"
        ],
        "operationId": "get_firewall"
      },
      "put": {
        "description": "Update a [Firewall](#firewalls).\n\nProvided [Labels](#labels) will overwritte the existing ones.\n\nIn case of a parallel running change on the [Firewall](#firewalls) a `conflict` error will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_firewall_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_firewall_response"
                }
              }
            },
            "description": "The `firewall` key contains the updated [Firewall](#firewalls)."
          }
        },
        "summary": "Update a Firewall",
        "tags": [
          "firewalls"
        ],
        "operationId": "replace_firewall"
      }
    },
    "/firewalls/{id}/actions": {
      "get": {
        "description": "Returns all [Actions](#actions) for the [Firewall](#firewalls).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "ID of the Firewall",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall. Limited to 52 bits to ensure compatability with JSON double precision floats.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer",
              "title": "Firewall ID"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "set_firewall_rules",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 38,
                          "type": "firewall"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_firewall_response"
                }
              }
            },
            "description": "The `actions` key contains a list of [Actions](#actions)."
          }
        },
        "summary": "Get all Actions for a Firewall",
        "tags": [
          "firewalls"
        ],
        "operationId": "list_actions_for_firewall"
      }
    },
    "/firewalls/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific [Action](#actions) for a [Firewall](#firewalls).",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "set_firewall_rules",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 38,
                        "type": "firewall"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_firewall_response"
                }
              }
            },
            "description": "The `action` key contains the [Firewall](#firewalls) [Action](#actions)."
          }
        },
        "summary": "Get an Action for a Firewall",
        "tags": [
          "firewalls"
        ],
        "operationId": "get_action_for_firewall"
      }
    },
    "/firewalls/{id}/actions/apply_to_resources": {
      "post": {
        "description": "Applies a [Firewall](#firewalls) to multiple resources.\n\nSupported resources:\n- [Servers](#servers) (with a public network interface)\n- [Label Selectors](#label-selector)\n\nA server can be applied to [a maximum of 5 Firewalls](https://docs.hetzner.com/cloud/firewalls/overview#limits).\n\n#### Error Codes specific to this Call\n\n| Code                          | Description                                                                                     |\n|-------------------------------|-------------------------------------------------------------------------------------------------|\n| `firewall_already_applied`    | [Firewall](#firewalls) is already applied to resource                                           |\n| `incompatible_network_type`   | The network type of the resource is not supported by [Firewalls](#firewalls)                    |\n| `firewall_resource_not_found` | The resource the [Firewall](#firewalls) should be applied to was not found                      |\n| `private_net_only_server`     | The [Server](#servers) the [Firewall](#firewalls) should be applied to has no public interface  |\n",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "apply_to": [
                  {
                    "server": {
                      "id": 42
                    },
                    "type": "server"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/apply_to_resources_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "apply_firewall",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 14,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 38,
                          "type": "firewall"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/apply_to_resources_response"
                }
              }
            },
            "description": "The `actions` key contains multiple [Actions](#actions) with the `apply_firewall` command."
          }
        },
        "summary": "Apply to Resources",
        "tags": [
          "firewalls"
        ],
        "operationId": "apply_to_resources"
      }
    },
    "/firewalls/{id}/actions/remove_from_resources": {
      "post": {
        "description": "Removes a [Firewall](#firewalls) from multiple resources.\n\nSupported resources:\n- [Servers](#servers) (with a public network interface)\n\n#### Error Codes specific to this Call\n\n| Code                                  | Description                                                                                             |\n|---------------------------------------|---------------------------------------------------------------------------------------------------------|\n| `firewall_already_removed`            | [Firewall](#firewalls) is already removed from the resource                                             |\n| `firewall_resource_not_found`         | The resource the [Firewall](#firewalls) should be removed from was not found                            |\n| `firewall_managed_by_label_selector`  | [Firewall](#firewall) is applied via a [Label Selector](#label-selector) and cannot be removed manually |\n",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "remove_from": [
                  {
                    "server": {
                      "id": 42
                    },
                    "type": "server"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/remove_from_resources_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "remove_firewall",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 14,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 38,
                          "type": "firewall"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/remove_from_resources_response"
                }
              }
            },
            "description": "The `actions` key contains multiple [Actions](#actions) with the `remove_firewall` command."
          }
        },
        "summary": "Remove from Resources",
        "tags": [
          "firewalls"
        ],
        "operationId": "remove_from_resources"
      }
    },
    "/firewalls/{id}/actions/set_rules": {
      "post": {
        "description": "Set the rules of a [Firewall](#firewalls).\n\nOverwrites the existing rules with the given ones. Pass an empty array to remove all rules.\n\nRules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits).\n",
        "parameters": [
          {
            "description": "ID of the Firewall.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Firewall.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "rules": {
                  "value": {
                    "rules": [
                      {
                        "description": "Allow port 80",
                        "direction": "in",
                        "port": "80",
                        "protocol": "tcp",
                        "source_ips": [
                          "28.239.13.1/32",
                          "28.239.14.0/24",
                          "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                        ]
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/set_rules_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "set_firewall_rules",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 38,
                          "type": "firewall"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    },
                    {
                      "command": "apply_firewall",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 14,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 38,
                          "type": "firewall"
                        },
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/set_rules_response"
                }
              }
            },
            "description": "The `action` key contains an [Action](#actions) with the `set_firewall_rules` command and additionally one with the `apply_firewall` command per resource of the [Firewall](#firewalls)."
          }
        },
        "summary": "Set Rules",
        "tags": [
          "firewalls"
        ],
        "operationId": "set_rules"
      }
    },
    "/firewalls/actions": {
      "get": {
        "description": "Returns all [Actions](#actions) for [Firewalls](#firewalls).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of [Actions](#actions)."
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "firewalls"
        ],
        "operationId": "list_firewall_actions"
      }
    },
    "/firewalls/actions/{id}": {
      "get": {
        "description": "Returns the specific [Action](#actions).",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key contains the [Action](#actions)."
          }
        },
        "summary": "Get an Action",
        "tags": [
          "firewalls"
        ],
        "operationId": "get_firewall_action"
      }
    },
    "/floating_ips": {
      "get": {
        "description": "List multiple [Floating IPs](#floating-ips).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_floating_ips_response"
                }
              }
            },
            "description": "Response for listing [Floating IPs](#floating-ips)."
          }
        },
        "summary": "Get all Floating IPs",
        "tags": [
          "floating_ips"
        ],
        "operationId": "list_floating_ips"
      },
      "post": {
        "description": "Create a [Floating IP](#floating-ips).\n\nProvide the `server` attribute to assign the [Floating IP](#floating-ips) to that server or provide a `home_location` to locate the [Floating IP](#floating-ips) at. Note that the [Floating IP](#floating-ips) can be assigned to a [Server](#servers) in any [Location](#locations) later on. For optimal routing it is advised to use the [Floating IP](#floating-ips) in the same [Location](#locations) it was created in.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_floating_ip_request"
              }
            }
          },
          "description": "The `type` argument is required while `home_location` and `server` are mutually exclusive."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "create_floating_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  },
                  "floating_ip": {
                    "blocked": false,
                    "created": "2016-01-30T23:50:00+00:00",
                    "description": "Web Frontend",
                    "dns_ptr": [
                      {
                        "dns_ptr": "server.example.com",
                        "ip": "2001:db8::1"
                      }
                    ],
                    "home_location": {
                      "city": "Falkenstein",
                      "country": "DE",
                      "description": "Falkenstein DC Park 1",
                      "id": 1,
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "name": "fsn1",
                      "network_zone": "eu-central"
                    },
                    "id": 4711,
                    "ip": "131.232.99.1",
                    "labels": {
                      "env": "dev"
                    },
                    "name": "Web Frontend",
                    "protection": {
                      "delete": false
                    },
                    "server": 42,
                    "type": "ipv4"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_floating_ip_response"
                }
              }
            },
            "description": "Response for creating a [Floating IP](#floating-ips).\n\nContains the created IP.\n"
          }
        },
        "summary": "Create a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "create_floating_ip"
      }
    },
    "/floating_ips/{id}": {
      "delete": {
        "description": "Deletes a [Floating IP](#floating-ips).\n\nIf the IP is assigned to a resource it will be unassigned.\n",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Floating IP deleted."
          }
        },
        "summary": "Delete a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "delete_floating_ip"
      },
      "get": {
        "description": "Returns a single [Floating IP](#floating-ips).",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_floating_ip_response"
                }
              }
            },
            "description": "Response for getting a single [Floating IP](#floating-ips)."
          }
        },
        "summary": "Get a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "get_floating_ip"
      },
      "put": {
        "description": "Update the description or [Labels](#labels) of a [Floating IP](#floating-ips).\nNote that when updating [Labels](#labels), the [Floating IPs](#floating-ips) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_floating_ip_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "floating_ip": {
                    "blocked": false,
                    "created": "2016-01-30T23:50:00+00:00",
                    "description": "Web Frontend",
                    "dns_ptr": [
                      {
                        "dns_ptr": "server.example.com",
                        "ip": "2001:db8::1"
                      }
                    ],
                    "home_location": {
                      "city": "Falkenstein",
                      "country": "DE",
                      "description": "Falkenstein DC Park 1",
                      "id": 1,
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "name": "fsn1",
                      "network_zone": "eu-central"
                    },
                    "id": 4711,
                    "ip": "131.232.99.1",
                    "labels": {
                      "labelkey": "value"
                    },
                    "name": "Web Frontend",
                    "protection": {
                      "delete": false
                    },
                    "server": 42,
                    "type": "ipv4"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_floating_ip_response"
                }
              }
            },
            "description": "Response for updating a [Floating IP](#floating-ips).\n\nContains the updated [Floating IP](#floating-ips).\n"
          }
        },
        "summary": "Update a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "replace_floating_ip"
      }
    },
    "/floating_ips/{id}/actions": {
      "get": {
        "description": "Lists [Actions](#actions) for a [Floating IP](#floating-ips).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "assign_floating_ip",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 4711,
                          "type": "server"
                        },
                        {
                          "id": 4712,
                          "type": "floating_ip"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_floating_ip_response"
                }
              }
            },
            "description": "Response for listing [Actions](#actions)."
          }
        },
        "summary": "Get all Actions for a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "list_actions_for_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific [Action](#actions) for a [Floating IP](#floating-ips).",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "assign_floating_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_floating_ip_response"
                }
              }
            },
            "description": "Response for getting an [Action](#actions)."
          }
        },
        "summary": "Get an Action for a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "get_action_for_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/assign": {
      "post": {
        "description": "Assigns a [Floating IP](#floating-ips) to a [Server](#servers).",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assign_floating_ip_to_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "assign_floating_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/assign_floating_ip_to_server_response"
                }
              }
            },
            "description": "Response for assigning a [Floating IP](#floating-ips).\n\nContains an [Action](#actions) of type `assign_floating_ip`.\n"
          }
        },
        "summary": "Assign a Floating IP to a Server",
        "tags": [
          "floating_ips"
        ],
        "operationId": "assign_floating_ip_to_server"
      }
    },
    "/floating_ips/{id}/actions/change_dns_ptr": {
      "post": {
        "description": "Change the reverse DNS records for this [Floating IP](#floating-ips).\n\nAllows to modify the PTR records set for the IP address.\n",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_records_for_floating_ip_request"
              }
            }
          },
          "description": "The `ip` attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Floating IP](#floating-ips). For IPv6 addresses this must be a single address within the `/64` subnet of the [Floating IP](#floating-ips).\n\nThe `dns_ptr` attribute specifies the hostname used for the IP address.\n\nFor IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.\n"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_dns_ptr",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_records_for_floating_ip_response"
                }
              }
            },
            "description": "Response for changing a [Floating IPs](#floating-ips) DNS pointer.\n\nContains an [Action](#actions) of type `change_dns_ptr`.\n"
          }
        },
        "summary": "Change reverse DNS records for a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "change_reverse_dns_records_for_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection settings configured for the [Floating IP](#floating-ips).",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_floating_ip_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_floating_ip_protection_response"
                }
              }
            },
            "description": "Response for changing a [Floating IPs](#floating-ips) protection settings.\n\nContains an [Action](#actions) of type `change_protection`.\n"
          }
        },
        "summary": "Change Floating IP Protection",
        "tags": [
          "floating_ips"
        ],
        "operationId": "change_floating_ip_protection"
      }
    },
    "/floating_ips/{id}/actions/unassign": {
      "post": {
        "description": "Unassigns a [Floating IP](#floating-ips).\n\nResults in the IP being unreachable. Can be assigned to another resource again.\n",
        "parameters": [
          {
            "description": "ID of the Floating IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Floating IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "unassign_floating_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/unassign_floating_ip_response"
                }
              }
            },
            "description": "Response for unassigning a [Floating IP](#floating-ips).\n\nContains an [Action](#actions) of type `unassign_floating_ip`.\n"
          }
        },
        "summary": "Unassign a Floating IP",
        "tags": [
          "floating_ips"
        ],
        "operationId": "unassign_floating_ip"
      }
    },
    "/floating_ips/actions": {
      "get": {
        "description": "Lists multiple [Actions](#actions).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "Response for listing [Actions](#actions)."
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "floating_ips"
        ],
        "operationId": "list_floating_ip_actions"
      }
    },
    "/floating_ips/actions/{id}": {
      "get": {
        "description": "Returns a single [Action](#actions).",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "Response for getting a single [Action](#actions)."
          }
        },
        "summary": "Get an Action",
        "tags": [
          "floating_ips"
        ],
        "operationId": "get_floating_ip_action"
      }
    },
    "/images": {
      "get": {
        "description": "Returns all Image objects. You can select specific Image types only and sort the results by using URI parameters.",
        "parameters": [
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "system",
                "snapshot",
                "backup",
                "app"
              ],
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times. The response will only contain Images matching the status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "available",
                "creating"
              ],
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times. Server ID linked to the Image. Only available for Images of type `backup`",
            "in": "query",
            "name": "bound_to",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times.",
            "in": "query",
            "name": "include_deprecated",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return only Images with the given architecture.",
            "in": "query",
            "name": "architecture",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_images_response"
                }
              }
            },
            "description": "The `images` key in the reply contains an array of Image objects with this structure"
          }
        },
        "summary": "Get all Images",
        "tags": [
          "images"
        ],
        "operationId": "list_images"
      }
    },
    "/images/{id}": {
      "delete": {
        "description": "Deletes an Image. Only Images of type `snapshot` and `backup` can be deleted.",
        "parameters": [
          {
            "description": "ID of the Image.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Image.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Image deleted"
          }
        },
        "summary": "Delete an Image",
        "tags": [
          "images"
        ],
        "operationId": "delete_image"
      },
      "get": {
        "description": "Returns a specific Image object.",
        "parameters": [
          {
            "description": "ID of the Image.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Image.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_image_response"
                }
              }
            },
            "description": "The `image` key in the reply contains an Image object with this structure"
          }
        },
        "summary": "Get an Image",
        "tags": [
          "images"
        ],
        "operationId": "get_image"
      },
      "put": {
        "description": "Updates the Image. You may change the description, convert a Backup Image to a Snapshot Image or change the Image labels. Only Images of type `snapshot` and `backup` can be updated.\n\nNote that when updating labels, the current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n",
        "parameters": [
          {
            "description": "ID of the Image.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Image.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_image_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "image": {
                    "architecture": "x86",
                    "bound_to": null,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "deleted": null,
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "description": "My new Image description",
                    "disk_size": 10,
                    "id": 4711,
                    "image_size": 2.3,
                    "labels": {
                      "labelkey": "value"
                    },
                    "name": null,
                    "os_flavor": "ubuntu",
                    "os_version": "20.04",
                    "protection": {
                      "delete": false
                    },
                    "rapid_deploy": false,
                    "status": "available",
                    "type": "snapshot"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_image_response"
                }
              }
            },
            "description": "The image key in the reply contains the modified Image object"
          }
        },
        "summary": "Update an Image",
        "tags": [
          "images"
        ],
        "operationId": "replace_image"
      }
    },
    "/images/{id}/actions": {
      "get": {
        "description": "Returns all Action objects for an Image. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.",
        "parameters": [
          {
            "description": "ID of the Image.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Image.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "change_protection",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 4711,
                          "type": "image"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_image_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions for an Image",
        "tags": [
          "images"
        ],
        "operationId": "list_actions_for_image"
      }
    },
    "/images/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific Action for an Image.",
        "parameters": [
          {
            "description": "ID of the Image.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Image.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "image"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_image_response"
                }
              }
            },
            "description": "The `action` key contains the Image Action"
          }
        },
        "summary": "Get an Action for an Image",
        "tags": [
          "images"
        ],
        "operationId": "get_action_for_image"
      }
    },
    "/images/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection configuration of the Image. Can only be used on snapshots.",
        "parameters": [
          {
            "description": "ID of the Image.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Image.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_image_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "image"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_image_protection_response"
                }
              }
            },
            "description": "The `action` key contains the `change_protection` Action"
          }
        },
        "summary": "Change Image Protection",
        "tags": [
          "images"
        ],
        "operationId": "change_image_protection"
      }
    },
    "/images/actions": {
      "get": {
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "images"
        ],
        "operationId": "list_image_actions"
      }
    },
    "/images/actions/{id}": {
      "get": {
        "description": "Returns a specific Action object.",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action",
        "tags": [
          "images"
        ],
        "operationId": "get_image_action"
      }
    },
    "/isos": {
      "get": {
        "description": "Returns all available ISO objects.",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return only ISOs with the given architecture.",
            "in": "query",
            "name": "architecture",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Images with wildcard architecture (architecture is null). Works only if architecture filter is specified.",
            "in": "query",
            "name": "include_architecture_wildcard",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_isos_response"
                }
              }
            },
            "description": "The `isos` key in the reply contains an array of iso objects with this structure"
          }
        },
        "summary": "Get all ISOs",
        "tags": [
          "isos"
        ],
        "operationId": "list_isos"
      }
    },
    "/isos/{id}": {
      "get": {
        "description": "Returns a specific ISO object.",
        "parameters": [
          {
            "description": "ID of the ISO.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the ISO.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_iso_response"
                }
              }
            },
            "description": "The `iso` key in the reply contains an array of ISO objects with this structure"
          }
        },
        "summary": "Get an ISO",
        "tags": [
          "isos"
        ],
        "operationId": "get_iso"
      }
    },
    "/load_balancer_types": {
      "get": {
        "description": "Gets all Load Balancer type objects.",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_load_balancer_types_response"
                }
              }
            },
            "description": "The `load_balancer_types` key in the reply contains an array of Load Balancer type objects with this structure"
          }
        },
        "summary": "Get all Load Balancer Types",
        "tags": [
          "load_balancer_types"
        ],
        "operationId": "list_load_balancer_types"
      }
    },
    "/load_balancer_types/{id}": {
      "get": {
        "description": "Gets a specific Load Balancer type object.",
        "parameters": [
          {
            "description": "ID of the Load Balancer Type.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer Type.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_load_balancer_type_response"
                }
              }
            },
            "description": "The `load_balancer_type` key in the reply contains a Load Balancer type object with this structure"
          }
        },
        "summary": "Get a Load Balancer Type",
        "tags": [
          "load_balancer_types"
        ],
        "operationId": "get_load_balancer_type"
      }
    },
    "/load_balancers": {
      "get": {
        "description": "Gets all existing Load Balancers that you have available.",
        "parameters": [
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_load_balancers_response"
                }
              }
            },
            "description": "The `load_balancers` key contains a list of Load Balancers"
          }
        },
        "summary": "Get all Load Balancers",
        "tags": [
          "load_balancers"
        ],
        "operationId": "list_load_balancers"
      },
      "post": {
        "description": "Creates a Load Balancer.\n\n#### Call specific error codes\n\n| Code                                    | Description                                                                                           |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------|\n| `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |\n| `ip_not_owned`                          | The IP is not owned by the owner of the project of the Load Balancer                                  |\n| `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |\n| `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |\n| `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |\n| `source_port_already_used`              | The source port you are trying to add is already in use                                               |\n| `missing_ipv4`                          | The server that you are trying to add as a public target does not have a public IPv4 address          |\n| `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_load_balancer_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "create_load_balancer",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  },
                  "load_balancer": {
                    "algorithm": {
                      "type": "round_robin"
                    },
                    "created": "2016-01-30T23:50:00+00:00",
                    "id": 4711,
                    "included_traffic": 654321,
                    "ingoing_traffic": 123456,
                    "labels": {
                      "env": "dev"
                    },
                    "load_balancer_type": {
                      "deprecated": "2016-01-30T23:50:00+00:00",
                      "description": "LB11",
                      "id": 1,
                      "max_assigned_certificates": 10,
                      "max_connections": 20000,
                      "max_services": 5,
                      "max_targets": 25,
                      "name": "lb11",
                      "prices": [
                        {
                          "included_traffic": 654321,
                          "location": "fsn1",
                          "price_hourly": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          },
                          "price_monthly": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          },
                          "price_per_tb_traffic": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          }
                        }
                      ]
                    },
                    "location": {
                      "city": "Falkenstein",
                      "country": "DE",
                      "description": "Falkenstein DC Park 1",
                      "id": 1,
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "name": "fsn1",
                      "network_zone": "eu-central"
                    },
                    "name": "Web Frontend",
                    "outgoing_traffic": 123456,
                    "private_net": [
                      {
                        "ip": "10.0.0.2",
                        "network": 4711
                      }
                    ],
                    "protection": {
                      "delete": false
                    },
                    "public_net": {
                      "enabled": false,
                      "ipv4": {
                        "ip": "1.2.3.4"
                      },
                      "ipv6": {
                        "ip": "2001:db8::1"
                      }
                    },
                    "services": [
                      {
                        "destination_port": 80,
                        "health_check": {
                          "http": {
                            "domain": "example.com",
                            "path": "/",
                            "response": "{\"status\": \"ok\"}",
                            "status_codes": [
                              "2??,3??"
                            ],
                            "tls": false
                          },
                          "interval": 15,
                          "port": 4711,
                          "protocol": "http",
                          "retries": 3,
                          "timeout": 10
                        },
                        "http": {
                          "certificates": [
                            897
                          ],
                          "cookie_lifetime": 300,
                          "cookie_name": "HCLBSTICKY",
                          "redirect_http": true,
                          "sticky_sessions": true
                        },
                        "listen_port": 443,
                        "protocol": "http",
                        "proxyprotocol": false
                      }
                    ],
                    "targets": [
                      {
                        "health_status": [
                          {
                            "listen_port": 443,
                            "status": "healthy"
                          }
                        ],
                        "server": {
                          "id": 80
                        },
                        "targets": [
                          {
                            "health_status": [
                              {
                                "listen_port": 443,
                                "status": "healthy"
                              }
                            ],
                            "server": {
                              "id": 80
                            },
                            "type": "server",
                            "use_private_ip": true
                          }
                        ],
                        "type": "server",
                        "use_private_ip": true
                      }
                    ]
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_load_balancer_response"
                }
              }
            },
            "description": "The `load_balancer` key contains the Load Balancer that was just created"
          }
        },
        "summary": "Create a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "create_load_balancer"
      }
    },
    "/load_balancers/{id}": {
      "delete": {
        "description": "Deletes a Load Balancer.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Load Balancer deleted"
          }
        },
        "summary": "Delete a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "delete_load_balancer"
      },
      "get": {
        "description": "Gets a specific Load Balancer object.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_load_balancer_response"
                }
              }
            },
            "description": "The `load_balancer` key contains the Load Balancer"
          }
        },
        "summary": "Get a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "get_load_balancer"
      },
      "put": {
        "description": "Updates a Load Balancer. You can update a Load Balancer’s name and a Load Balancer’s labels.\n\nNote that when updating labels, the Load Balancer’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n\nNote: if the Load Balancer object changes during the request, the response will be a “conflict” error.\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_load_balancer_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "load_balancer": {
                    "algorithm": {
                      "type": "round_robin"
                    },
                    "created": "2016-01-30T23:50:00+00:00",
                    "id": 4711,
                    "included_traffic": 654321,
                    "ingoing_traffic": 123456,
                    "labels": {
                      "labelkey": "value"
                    },
                    "load_balancer_type": {
                      "deprecated": "2016-01-30T23:50:00+00:00",
                      "description": "LB11",
                      "id": 1,
                      "max_assigned_certificates": 10,
                      "max_connections": 20000,
                      "max_services": 5,
                      "max_targets": 25,
                      "name": "lb11",
                      "prices": [
                        {
                          "included_traffic": 654321,
                          "location": "fsn1",
                          "price_hourly": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          },
                          "price_monthly": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          },
                          "price_per_tb_traffic": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          }
                        }
                      ]
                    },
                    "location": {
                      "city": "Falkenstein",
                      "country": "DE",
                      "description": "Falkenstein DC Park 1",
                      "id": 1,
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "name": "fsn1",
                      "network_zone": "eu-central"
                    },
                    "name": "new-name",
                    "outgoing_traffic": 123456,
                    "private_net": [
                      {
                        "ip": "10.0.0.2",
                        "network": 4711
                      }
                    ],
                    "protection": {
                      "delete": false
                    },
                    "public_net": {
                      "enabled": false,
                      "ipv4": {
                        "ip": "1.2.3.4"
                      },
                      "ipv6": {
                        "ip": "2001:db8::1"
                      }
                    },
                    "services": [
                      {
                        "destination_port": 80,
                        "health_check": {
                          "http": {
                            "domain": "example.com",
                            "path": "/",
                            "response": "{\"status\": \"ok\"}",
                            "status_codes": [
                              "2??,3??"
                            ],
                            "tls": false
                          },
                          "interval": 15,
                          "port": 4711,
                          "protocol": "http",
                          "retries": 3,
                          "timeout": 10
                        },
                        "http": {
                          "certificates": [
                            897
                          ],
                          "cookie_lifetime": 300,
                          "cookie_name": "HCLBSTICKY",
                          "redirect_http": true,
                          "sticky_sessions": true
                        },
                        "listen_port": 443,
                        "protocol": "http",
                        "proxyprotocol": false
                      }
                    ],
                    "targets": [
                      {
                        "health_status": [
                          {
                            "listen_port": 443,
                            "status": "healthy"
                          }
                        ],
                        "ip": {
                          "ip": "203.0.113.1"
                        },
                        "label_selector": {
                          "selector": "env=prod"
                        },
                        "server": {
                          "id": 80
                        },
                        "targets": [
                          {
                            "health_status": [
                              {
                                "listen_port": 443,
                                "status": "healthy"
                              }
                            ],
                            "server": {
                              "id": 80
                            },
                            "type": "server",
                            "use_private_ip": true
                          }
                        ],
                        "type": "server",
                        "use_private_ip": true
                      }
                    ]
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_load_balancer_response"
                }
              }
            },
            "description": "The `load_balancer` key contains the updated Load Balancer"
          }
        },
        "summary": "Update a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "replace_load_balancer"
      }
    },
    "/load_balancers/{id}/actions": {
      "get": {
        "description": "Returns all Action objects for a Load Balancer. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "add_service",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 4711,
                          "type": "load_balancer"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_load_balancer_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions for a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "list_actions_for_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific Action for a Load Balancer.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_load_balancer_response"
                }
              }
            },
            "description": "The `action` key contains the Load Balancer Action"
          }
        },
        "summary": "Get an Action for a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "get_action_for_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/add_service": {
      "post": {
        "description": "Adds a service to a Load Balancer.\n\n#### Call specific error codes\n\n| Code                       | Description                                             |\n|----------------------------|---------------------------------------------------------|\n| `source_port_already_used` | The source port you are trying to add is already in use |\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_service_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "add_service",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_service_response"
                }
              }
            },
            "description": "The `action` key contains the `add_service` Action"
          }
        },
        "summary": "Add Service",
        "tags": [
          "load_balancers"
        ],
        "operationId": "add_service"
      }
    },
    "/load_balancers/{id}/actions/add_target": {
      "post": {
        "description": "Adds a target to a Load Balancer.\n\n#### Call specific error codes\n\n| Code                                    | Description                                                                                           |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------|\n| `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |\n| `ip_not_owned`                          | The IP you are trying to add as a target is not owned by the Project owner                            |\n| `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |\n| `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |\n| `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |\n| `missing_ipv4`                          | The server that you are trying to add as a public target does not have a public IPv4 address          |\n| `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_target_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "add_target",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_target_response"
                }
              }
            },
            "description": "The `action` key contains the `add_target` Action"
          }
        },
        "summary": "Add Target",
        "tags": [
          "load_balancers"
        ],
        "operationId": "add_target"
      }
    },
    "/load_balancers/{id}/actions/attach_to_network": {
      "post": {
        "description": "Attach a Load Balancer to a Network.\n\n**Call specific error codes**\n\n| Code                             | Description                                                           |\n|----------------------------------|-----------------------------------------------------------------------|\n| `load_balancer_already_attached` | The Load Balancer is already attached to a network                    |\n| `ip_not_available`               | The provided Network IP is not available                              |\n| `no_subnet_available`            | No Subnet or IP is available for the Load Balancer within the network |\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_load_balancer_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "attach_to_network",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_load_balancer_to_network_response"
                }
              }
            },
            "description": "The `action` key contains the `attach_to_network` Action"
          }
        },
        "summary": "Attach a Load Balancer to a Network",
        "tags": [
          "load_balancers"
        ],
        "operationId": "attach_load_balancer_to_network"
      }
    },
    "/load_balancers/{id}/actions/change_algorithm": {
      "post": {
        "description": "Change the algorithm that determines to which target new requests are sent.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_algorithm_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_algorithm",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_algorithm_response"
                }
              }
            },
            "description": "The `action` key contains the `change_algorithm` Action"
          }
        },
        "summary": "Change Algorithm",
        "tags": [
          "load_balancers"
        ],
        "operationId": "change_algorithm"
      }
    },
    "/load_balancers/{id}/actions/change_dns_ptr": {
      "post": {
        "description": "Changes the hostname that will appear when getting the hostname belonging to the public IPs (IPv4 and IPv6) of this Load Balancer.\n\nFloating IPs assigned to the Server are not affected by this.\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_load_balancer_request"
              }
            }
          },
          "description": "Select the IP address for which to change the DNS entry by passing `ip`. It can be either IPv4 or IPv6. The target hostname is set by passing `dns_ptr`."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_dns_ptr",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_load_balancer_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Change reverse DNS entry for this Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "change_reverse_dns_entry_for_this_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection configuration of a Load Balancer.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_load_balancer_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_load_balancer_protection_response"
                }
              }
            },
            "description": "The `action` key contains the `change_protection` Action"
          }
        },
        "summary": "Change Load Balancer Protection",
        "tags": [
          "load_balancers"
        ],
        "operationId": "change_load_balancer_protection"
      }
    },
    "/load_balancers/{id}/actions/change_type": {
      "post": {
        "description": "Changes the type (Max Services, Max Targets and Max Connections) of a Load Balancer.\n\n**Call specific error codes**\n\n| Code                         | Description                                                     |\n|------------------------------|-----------------------------------------------------------------|\n| `invalid_load_balancer_type` | The Load Balancer type does not fit for the given Load Balancer |\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_type_of_load_balancer_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_load_balancer_type",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_type_of_load_balancer_response"
                }
              }
            },
            "description": "The `action` key contains the `change_load_balancer_type` Action"
          }
        },
        "summary": "Change the Type of a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "change_type_of_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/delete_service": {
      "post": {
        "description": "Delete a service of a Load Balancer.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_service_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "delete_service",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/delete_service_response"
                }
              }
            },
            "description": "The `action` key contains the `delete_service` Action"
          }
        },
        "summary": "Delete Service",
        "tags": [
          "load_balancers"
        ],
        "operationId": "delete_service"
      }
    },
    "/load_balancers/{id}/actions/detach_from_network": {
      "post": {
        "description": "Detaches a Load Balancer from a network.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detach_load_balancer_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "detach_from_network",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_load_balancer_from_network_response"
                }
              }
            },
            "description": "The `action` key contains the `detach_from_network` Action"
          }
        },
        "summary": "Detach a Load Balancer from a Network",
        "tags": [
          "load_balancers"
        ],
        "operationId": "detach_load_balancer_from_network"
      }
    },
    "/load_balancers/{id}/actions/disable_public_interface": {
      "post": {
        "description": "Disable the public interface of a Load Balancer. The Load Balancer will be not accessible from the internet via its public IPs.\n\n#### Call specific error codes\n\n| Code                                      | Description                                                                    |\n|-------------------------------------------|--------------------------------------------------------------------------------|\n| `load_balancer_not_attached_to_network`   |  The Load Balancer is not attached to a network                                |\n| `targets_without_use_private_ip`          | The Load Balancer has targets that use the public IP instead of the private IP |\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "disable_public_interface",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/disable_public_interface_of_load_balancer_response"
                }
              }
            },
            "description": "The `action` key contains the `disable_public_interface` Action"
          }
        },
        "summary": "Disable the public interface of a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "disable_public_interface_of_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/enable_public_interface": {
      "post": {
        "description": "Enable the public interface of a Load Balancer. The Load Balancer will be accessible from the internet via its public IPs.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "enable_public_interface",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/enable_public_interface_of_load_balancer_response"
                }
              }
            },
            "description": "The `action` key contains the `enable_public_interface` Action"
          }
        },
        "summary": "Enable the public interface of a Load Balancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "enable_public_interface_of_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/remove_target": {
      "post": {
        "description": "Removes a target from a Load Balancer.",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remove_target_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "remove_target",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/remove_target_response"
                }
              }
            },
            "description": "The `action` key contains the `remove_target` Action"
          }
        },
        "summary": "Remove Target",
        "tags": [
          "load_balancers"
        ],
        "operationId": "remove_target"
      }
    },
    "/load_balancers/{id}/actions/update_service": {
      "post": {
        "description": "Updates a Load Balancer Service.\n\n#### Call specific error codes\n\n| Code                       | Description                                             |\n|----------------------------|---------------------------------------------------------|\n| `source_port_already_used` | The source port you are trying to add is already in use |\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_service_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "update_service",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/update_service_response"
                }
              }
            },
            "description": "The `action` key contains the `update_service` Action"
          }
        },
        "summary": "Update Service",
        "tags": [
          "load_balancers"
        ],
        "operationId": "update_service"
      }
    },
    "/load_balancers/{id}/metrics": {
      "get": {
        "description": "You must specify the type of metric to get: `open_connections`, `connections_per_second`, `requests_per_second` or `bandwidth`. You can also specify more than one type by comma separation, e.g. `requests_per_second,bandwidth`.\n\nDepending on the type you will get different time series data:\n\n|Type | Timeseries | Unit | Description |\n|---- |------------|------|-------------|\n| open_connections | open_connections | number | Open connections |\n| connections_per_second | connections_per_second | connections/s | Connections per second |\n| requests_per_second | requests_per_second | requests/s | Requests per second |\n| bandwidth | bandwidth.in | bytes/s | Ingress bandwidth |\n|| bandwidth.out | bytes/s | Egress bandwidth |\n\nMetrics are available for the last 30 days only.\n\nIf you do not provide the step argument we will automatically adjust it so that 200 samples are returned.\n\nWe limit the number of samples to a maximum of 500 and will adjust the step parameter accordingly.\n",
        "parameters": [
          {
            "description": "ID of the Load Balancer.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Load Balancer.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Type of metrics to get",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "open_connections",
                "connections_per_second",
                "requests_per_second",
                "bandwidth"
              ],
              "type": "string"
            }
          },
          {
            "description": "Start of period to get Metrics for (in ISO-8601 format)",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End of period to get Metrics for (in ISO-8601 format)",
            "in": "query",
            "name": "end",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resolution of results in seconds",
            "in": "query",
            "name": "step",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_metrics_for_loadbalancer_response"
                }
              }
            },
            "description": "The `metrics` key in the reply contains a metrics object with this structure"
          }
        },
        "summary": "Get Metrics for a LoadBalancer",
        "tags": [
          "load_balancers"
        ],
        "operationId": "get_metrics_for_loadbalancer"
      }
    },
    "/load_balancers/actions": {
      "get": {
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "load_balancers"
        ],
        "operationId": "list_load_balancer_actions"
      }
    },
    "/load_balancers/actions/{id}": {
      "get": {
        "description": "Returns a specific Action object.",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action",
        "tags": [
          "load_balancers"
        ],
        "operationId": "get_load_balancer_action"
      }
    },
    "/locations": {
      "get": {
        "description": "Returns all [Locations](#locations).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_locations_response"
                }
              }
            },
            "description": "Response with the [Locations](#locations)."
          }
        },
        "summary": "Get all Locations",
        "tags": [
          "locations"
        ],
        "operationId": "list_locations"
      }
    },
    "/locations/{id}": {
      "get": {
        "description": "Returns a [Location](#locations).",
        "parameters": [
          {
            "description": "ID of the Location.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Location.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_location_response"
                }
              }
            },
            "description": "Response with the [Location](#locations)."
          }
        },
        "summary": "Get a Location",
        "tags": [
          "locations"
        ],
        "operationId": "get_location"
      }
    },
    "/networks": {
      "get": {
        "description": "List multiple [Networks](#networks).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_networks_response"
                }
              }
            },
            "description": "Response for listing [Networks](#networks)."
          }
        },
        "summary": "Get all Networks",
        "tags": [
          "networks"
        ],
        "operationId": "list_networks"
      },
      "post": {
        "description": "Creates a [Network](#networks).\n\nThe provided `ip_range` can only be extended later on, but not reduced.\n\nSubnets can be added now or later on using the [add subnet action](#network-actions-add-a-subnet-to-a-network). If you do not specify an `ip_range` for the subnet the first available /24 range will be used.\n\nRoutes can be added now or later by using the [add route action](#network-actions-add-a-route-to-a-network).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_network_response"
                }
              }
            },
            "description": "Response for creating a [Network](#networks).\n\nContains the newly created [Network](#networks).\n"
          }
        },
        "summary": "Create a Network",
        "tags": [
          "networks"
        ],
        "operationId": "create_network"
      }
    },
    "/networks/{id}": {
      "delete": {
        "description": "Deletes a [Network](#networks).\n\nAttached resources will be detached automatically.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for deleting a [Network](#networks)."
          }
        },
        "summary": "Delete a Network",
        "tags": [
          "networks"
        ],
        "operationId": "delete_network"
      },
      "get": {
        "description": "Get a specific [Network](#networks).",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_network_response"
                }
              }
            },
            "description": "The `network` key contains the network"
          }
        },
        "summary": "Get a Network",
        "tags": [
          "networks"
        ],
        "operationId": "get_network"
      },
      "put": {
        "description": "Update a [Network](#networks).\n\nNote that when updating [Labels](#labels), the [Networks](#networks) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_network_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "network": {
                    "created": "2016-01-30T23:50:00+00:00",
                    "expose_routes_to_vswitch": true,
                    "id": 4711,
                    "ip_range": "10.0.0.0/16",
                    "labels": {
                      "labelkey": "value"
                    },
                    "load_balancers": [
                      42
                    ],
                    "name": "new-name",
                    "protection": {
                      "delete": false
                    },
                    "routes": [
                      {
                        "destination": "10.100.1.0/24",
                        "gateway": "10.0.1.1"
                      }
                    ],
                    "servers": [
                      42
                    ],
                    "subnets": [
                      {
                        "gateway": "10.0.0.1",
                        "ip_range": "10.0.1.0/24",
                        "network_zone": "eu-central",
                        "type": "cloud"
                      }
                    ]
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_network_response"
                }
              }
            },
            "description": "Response for updating a [Network](#networks).\n\nContains the updated [Network](#networks).\n"
          }
        },
        "summary": "Update a Network",
        "tags": [
          "networks"
        ],
        "operationId": "replace_network"
      }
    },
    "/networks/{id}/actions": {
      "get": {
        "description": "Lists [Actions](#actions) for a [Network](#networks).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "add_subnet",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_network_response"
                }
              }
            },
            "description": "Response for listing [Actions](#actions)."
          }
        },
        "summary": "Get all Actions for a Network",
        "tags": [
          "networks"
        ],
        "operationId": "list_actions_for_network"
      }
    },
    "/networks/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific [Action](#actions) for a [Network](#networks).",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "add_subnet",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_network_response"
                }
              }
            },
            "description": "Response for getting an [Action](#actions)."
          }
        },
        "summary": "Get an Action for a Network",
        "tags": [
          "networks"
        ],
        "operationId": "get_action_for_network"
      }
    },
    "/networks/{id}/actions/add_route": {
      "post": {
        "description": "Adds a route entry to a [Network](#networks).\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_route_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "add_route",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_route_to_network_response"
                }
              }
            },
            "description": "Response for adding a route to a [Network](#networks).\n\nThe `action` key contains an [Action](#actions) with command `add_route`.\n"
          }
        },
        "summary": "Add a route to a Network",
        "tags": [
          "networks"
        ],
        "operationId": "add_route_to_network"
      }
    },
    "/networks/{id}/actions/add_subnet": {
      "post": {
        "description": "Adds a new subnet to the [Network](#networks).\n\nIf the subnet `ip_range` is not provided, the first available `/24` IP range will be used.\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_subnet_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "add_subnet",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_subnet_to_network_response"
                }
              }
            },
            "description": "Response for adding a subnet to a [Network](#networks).\n\nThe `action` key contains an [Action](#actions) with command `add_subnet`.\n"
          }
        },
        "summary": "Add a subnet to a Network",
        "tags": [
          "networks"
        ],
        "operationId": "add_subnet_to_network"
      }
    },
    "/networks/{id}/actions/change_ip_range": {
      "post": {
        "description": "Changes the IP range of a [Network](#networks).\n\nThe following restrictions apply to changing the IP range:\n- IP ranges can only be extended and never shrunk.\n- IPs can only be added to the end of the existing range, therefore only the netmask is allowed to be changed.\n\nTo update the routes on the connected [Servers](#servers), they need to be rebooted or the routes to be updated manually.\n\nFor example if the [Network](#networks) has a range of `10.0.0.0/16` to extend it the new range has to start with the IP `10.0.0.0` as well. The netmask `/16` can be changed to a smaller one then `16` therefore increasing the IP range. A valid entry would be `10.0.0.0/15`, `10.0.0.0/14` or `10.0.0.0/13` and so on.\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_ip_range_of_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_ip_range",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_ip_range_of_network_response"
                }
              }
            },
            "description": "Response for changing the [Networks](#networks) IP range.\n\nThe `action` key contains an [Action](#actions) with command `change_ip_range`.\n"
          }
        },
        "summary": "Change IP range of a Network",
        "tags": [
          "networks"
        ],
        "operationId": "change_ip_range_of_network"
      }
    },
    "/networks/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection settings of a [Network](#networks).\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_network_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_network_protection_response"
                }
              }
            },
            "description": "Response for changing the [Networks](#networks) protection.\n\nThe `action` key contains an [Action](#actions) with command `change_protection`.\n"
          }
        },
        "summary": "Change Network Protection",
        "tags": [
          "networks"
        ],
        "operationId": "change_network_protection"
      }
    },
    "/networks/{id}/actions/delete_route": {
      "post": {
        "description": "Delete a route entry from a [Network](#networks).\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_route_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "delete_route",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/delete_route_from_network_response"
                }
              }
            },
            "description": "Response for deleting a route from a [Network](#networks).\n\nThe `action` key contains an [Action](#actions) with command `delete_route`.\n"
          }
        },
        "summary": "Delete a route from a Network",
        "tags": [
          "networks"
        ],
        "operationId": "delete_route_from_network"
      }
    },
    "/networks/{id}/actions/delete_subnet": {
      "post": {
        "description": "Deletes a single subnet entry from a [Network](#networks).\n\nSubnets containing attached resources can not be deleted, they must be detached beforehand.\n\nIf a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Network.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Network.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_subnet_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "delete_subnet",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/delete_subnet_from_network_response"
                }
              }
            },
            "description": "Response for deleting a subnet from a [Network](#networks).\n\nThe `action` key contains an [Action](#actions) with command `delete_subnet`.\n"
          }
        },
        "summary": "Delete a subnet from a Network",
        "tags": [
          "networks"
        ],
        "operationId": "delete_subnet_from_network"
      }
    },
    "/networks/actions": {
      "get": {
        "description": "Lists multiple [Actions](#actions).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "Response for listing [Actions](#actions)."
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "networks"
        ],
        "operationId": "list_network_actions"
      }
    },
    "/networks/actions/{id}": {
      "get": {
        "description": "Returns a single [Action](#actions).",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "Response for getting a single [Action](#actions)."
          }
        },
        "summary": "Get an Action",
        "tags": [
          "networks"
        ],
        "operationId": "get_network_action"
      }
    },
    "/placement_groups": {
      "get": {
        "description": "Returns all PlacementGroup objects.",
        "parameters": [
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times. The response will only contain PlacementGroups matching the type.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "spread"
              ],
              "title": "ParameterType",
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  },
                  "placement_groups": [
                    {
                      "created": "2019-01-08T12:10:00+00:00",
                      "id": 897,
                      "labels": {
                        "key": "value"
                      },
                      "name": "my Placement Group",
                      "servers": [
                        4711,
                        4712
                      ],
                      "type": "spread"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/list_placementgroups_response"
                }
              }
            },
            "description": "The `placement_groups` key contains an array of PlacementGroup objects"
          }
        },
        "summary": "Get all PlacementGroups",
        "tags": [
          "placement_groups"
        ],
        "operationId": "list_placementgroups"
      },
      "post": {
        "description": "Creates a new PlacementGroup.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "spread": {
                  "summary": "Creating a type `spread` Placement Group",
                  "value": {
                    "name": "my Placement Group",
                    "type": "spread"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/create_placementgroup_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "spread": {
                    "summary": "Response when creating a type `spread` PlacementGroup",
                    "value": {
                      "placement_group": {
                        "created": "2019-01-08T12:10:00+00:00",
                        "id": 897,
                        "labels": {
                          "key": "value"
                        },
                        "name": "my Placement Group",
                        "servers": [],
                        "type": "spread"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_placementgroup_response"
                }
              }
            },
            "description": "The `PlacementGroup` key contains the PlacementGroup that was just created."
          }
        },
        "summary": "Create a PlacementGroup",
        "tags": [
          "placement_groups"
        ],
        "operationId": "create_placementgroup"
      }
    },
    "/placement_groups/{id}": {
      "delete": {
        "description": "Deletes a PlacementGroup.",
        "parameters": [
          {
            "description": "ID of the Placement Group.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Placement Group.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "PlacementGroup deleted"
          }
        },
        "summary": "Delete a PlacementGroup",
        "tags": [
          "placement_groups"
        ],
        "operationId": "delete_placementgroup"
      },
      "get": {
        "description": "Gets a specific PlacementGroup object.",
        "parameters": [
          {
            "description": "ID of the Placement Group.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Placement Group.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "placement_group": {
                    "created": "2019-01-08T12:10:00+00:00",
                    "id": 897,
                    "labels": {
                      "key": "value"
                    },
                    "name": "my Placement Group",
                    "servers": [
                      4711,
                      4712
                    ],
                    "type": "spread"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_placementgroup_response"
                }
              }
            },
            "description": "The `placement_group` key contains a PlacementGroup object"
          }
        },
        "summary": "Get a PlacementGroup",
        "tags": [
          "placement_groups"
        ],
        "operationId": "get_placementgroup"
      },
      "put": {
        "description": "Updates the PlacementGroup properties.\n\nNote that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n\nNote: if the PlacementGroup object changes during the request, the response will be a “conflict” error.\n",
        "parameters": [
          {
            "description": "ID of the Placement Group.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Placement Group.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_placementgroup_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "placement_group": {
                    "created": "2019-01-08T12:10:00+00:00",
                    "id": 897,
                    "labels": {
                      "key": "value"
                    },
                    "name": "my Placement Group",
                    "servers": [
                      4711,
                      4712
                    ],
                    "type": "spread"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_placementgroup_response"
                }
              }
            },
            "description": "The `certificate` key contains the PlacementGroup that was just updated"
          }
        },
        "summary": "Update a PlacementGroup",
        "tags": [
          "placement_groups"
        ],
        "operationId": "replace_placementgroup"
      }
    },
    "/pricing": {
      "get": {
        "description": "Returns prices for all resources available on the platform. VAT and currency of the Project owner are used for calculations.\n\nBoth net and gross prices are included in the response.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_prices_response"
                }
              }
            },
            "description": "The `pricing` key in the reply contains an pricing object with this structure"
          }
        },
        "summary": "Get all prices",
        "tags": [
          "pricing"
        ],
        "operationId": "list_prices"
      }
    },
    "/primary_ips": {
      "get": {
        "description": "List multiple [Primary IPs](#primary-ips).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter results by IP address.",
            "example": "127.0.0.1",
            "in": "query",
            "name": "ip",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_primary_ips_response"
                }
              }
            },
            "description": "Response for listing [Primary IPs](#primary-ips)."
          }
        },
        "summary": "Get all Primary IPs",
        "tags": [
          "primary_ips"
        ],
        "operationId": "list_primary_ips"
      },
      "post": {
        "description": "Create a new [Primary IP](#primary-ips).\n\nCan optionally be assigned to a resource by providing an `assignee_id` and `assignee_type`.\n\nIf not assigned to a resource the `datacenter` key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.\n\nA [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.\n\n#### Call specific error codes\n\n| Code                          | Description                                                              |\n|------------------------------ |------------------------------------------------------------------------- |\n| `server_not_stopped`          | The specified [Server](#servers) is running, but needs to be powered off |\n| `server_has_ipv4`             | The [Server](#servers) already has an ipv4 address                       |\n| `server_has_ipv6`             | The [Server](#servers) already has an ipv6 address                       |\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_primary_ip_request"
              }
            }
          },
          "description": "Request Body for creating a new [Primary IP](#primary-ips).\n\nThe `datacenter` and `assignee_id`/`assignee_type` attributes are mutually exclusive.\n"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "create_primary_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 17,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  },
                  "primary_ip": {
                    "assignee_id": 17,
                    "assignee_type": "server",
                    "auto_delete": true,
                    "blocked": false,
                    "created": "2016-01-30T23:50:00+00:00",
                    "datacenter": {
                      "description": "Falkenstein DC Park 8",
                      "id": 42,
                      "location": {
                        "city": "Falkenstein",
                        "country": "DE",
                        "description": "Falkenstein DC Park 1",
                        "id": 1,
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "name": "fsn1",
                        "network_zone": "eu-central"
                      },
                      "name": "fsn1-dc8",
                      "server_types": {
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ],
                        "supported": [
                          1,
                          2,
                          3
                        ]
                      }
                    },
                    "dns_ptr": [
                      {
                        "dns_ptr": "server.example.com",
                        "ip": "2001:db8::1"
                      }
                    ],
                    "id": 42,
                    "ip": "131.232.99.1",
                    "labels": {
                      "labelkey": "value"
                    },
                    "name": "my-ip",
                    "protection": {
                      "delete": false
                    },
                    "type": "ipv4"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_primary_ip_response"
                }
              }
            },
            "description": "Response for creating a [Primary IP](#primary-ips).\n\nContains the newly created [Primary IP](#primary-ips).\n"
          }
        },
        "summary": "Create a Primary IP",
        "tags": [
          "primary_ips"
        ],
        "operationId": "create_primary_ip"
      }
    },
    "/primary_ips/{id}": {
      "delete": {
        "description": "Deletes a [Primary IP](#primary-ips).\n\nIf assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.\n",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "[Primary IP](#primary-ips) deletion succeeded."
          }
        },
        "summary": "Delete a Primary IP",
        "tags": [
          "primary_ips"
        ],
        "operationId": "delete_primary_ip"
      },
      "get": {
        "description": "Returns a [Primary IP](#primary-ips). - Primary IPs",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_primary_ip_response"
                }
              }
            },
            "description": "The `primary_ip` key contains the [Primary IP](#primary-ips)."
          }
        },
        "summary": "Get a Primary IP",
        "tags": [
          "primary_ips"
        ],
        "operationId": "get_primary_ip"
      },
      "put": {
        "description": "Update the [Primary IP](#primary-ips).\n\nNote that when updating [Labels](#labels), the [Primary IPs](#primary-ips) current set of [Labels](#labels) will be replaced with the [Labels](#labels) provided with the request. So, for example, if you want to add a new [Label](#labels), you have to provide all existing [Labels](#labels) plus the new [Label](#labels) in the request body.\n\nIf another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code `conflict` will be returned.\n",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_primary_ip_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_primary_ip_response"
                }
              }
            },
            "description": "The `primary_ip` key contains the updated [Primary IP](#primary-ips)."
          }
        },
        "summary": "Update a Primary IP",
        "tags": [
          "primary_ips"
        ],
        "operationId": "replace_primary_ip"
      }
    },
    "/primary_ips/{id}/actions/assign": {
      "post": {
        "description": "Assign a [Primary IP](#primary-ips) to a resource.\n\nA [Server](#servers) can only have one [Primary IP](#primary-ips) of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use [Floating IPs](#floating-ips).\n\nA [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.\n\n#### Error Codes specific to this Call\n\n| Code                          | Description                                                                      |\n|------------------------------ |--------------------------------------------------------------------------------- |\n| `server_not_stopped`          | The [Server](#servers) is running, but needs to be powered off                   |\n| `primary_ip_already_assigned` | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) |\n| `server_has_ipv4`             | The [Server](#servers) already has an IPv4 address                               |\n| `server_has_ipv6`             | The [Server](#servers) already has an IPv6 address                               |\n",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assign_primary_ip_to_resource_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "assign_primary_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "primary_ip"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/assign_primary_ip_to_resource_response"
                }
              }
            },
            "description": "Response for assigning a [Primary IP](#primary-ips).\n\nContains an [Action](#actions) of type `assign_primary_ip`.\n"
          }
        },
        "summary": "Assign a Primary IP to a resource",
        "tags": [
          "primary_ips"
        ],
        "operationId": "assign_primary_ip_to_resource"
      }
    },
    "/primary_ips/{id}/actions/change_dns_ptr": {
      "post": {
        "description": "Change the reverse DNS records for this [Primary IP](#primary-ips).\n\nAllows to modify the PTR records set for the IP address.\n",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_records_for_primary_ip_request"
              }
            }
          },
          "description": "The `ip` attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the `/64` subnet of the [Primary IP](#primary-ips).\n\nThe `dns_ptr` attribute specifies the hostname used for the IP address.\n\nFor IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.\n"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_dns_ptr",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "primary_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_records_for_primary_ip_response"
                }
              }
            },
            "description": "Response for changing a [Primary IPs](#primary-ips) DNS pointer.\n\nContains an [Action](#actions) of type `change_dns_ptr`.\n"
          }
        },
        "summary": "Change reverse DNS records for a Primary IP",
        "tags": [
          "primary_ips"
        ],
        "operationId": "change_reverse_dns_records_for_primary_ip"
      }
    },
    "/primary_ips/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection configuration of a [Primary IP](#primary-ips).\n\nA [Primary IPs](#primary-ips) deletion protection can only be enabled if its `auto_delete` property is set to `false`.\n",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_primary_ip_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "primary_ip"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_primary_ip_protection_response"
                }
              }
            },
            "description": "Response for changing a [Primary IPs](#primary-ips) protection settings.\n\nContains an [Action](#actions) of type `change_protection`.\n"
          }
        },
        "summary": "Change Primary IP Protection",
        "tags": [
          "primary_ips"
        ],
        "operationId": "change_primary_ip_protection"
      }
    },
    "/primary_ips/{id}/actions/unassign": {
      "post": {
        "description": "Unassign a [Primary IP](#primary-ips) from a resource.\n\nA [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.\n\nA [Server](#server) requires at least one network interface (public or private) to be powered on.\n\n#### Error Codes specific to this Call\n\n| Code                              | Description                                                   |\n|---------------------------------- |-------------------------------------------------------------- |\n| `server_not_stopped`              | The [Server](#server) is running, but needs to be powered off |\n| `server_is_load_balancer_target`  | The [Server](#server) IPv4 address is a loadbalancer target   |\n",
        "parameters": [
          {
            "description": "ID of the Primary IP.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Primary IP.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "unassign_primary_ip",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "primary_ip"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/unassign_primary_ip_from_resource_response"
                }
              }
            },
            "description": "Response for unassigning a [Primary IP](#primary-ips).\n\nContains an [Action](#actions) of type `unassign_primary_ip`.\n"
          }
        },
        "summary": "Unassign a Primary IP from a resource",
        "tags": [
          "primary_ips"
        ],
        "operationId": "unassign_primary_ip_from_resource"
      }
    },
    "/primary_ips/actions": {
      "get": {
        "description": "Lists multiple [Actions](#actions).\n\nUse the provided URI parameters to modify the result.\n",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "Response for listing [Actions](#actions)."
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "primary_ips"
        ],
        "operationId": "list_primary_ip_actions"
      }
    },
    "/primary_ips/actions/{id}": {
      "get": {
        "description": "Returns a single [Action](#actions).",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "Response for getting a single [Action](#actions)."
          }
        },
        "summary": "Get an Action",
        "tags": [
          "primary_ips"
        ],
        "operationId": "get_primary_ip_action"
      }
    },
    "/server_types": {
      "get": {
        "description": "Gets all Server type objects.",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_server_types_response"
                }
              }
            },
            "description": "The `server_types` key in the reply contains an array of Server type objects with this structure"
          }
        },
        "summary": "Get all Server Types",
        "tags": [
          "server_types"
        ],
        "operationId": "list_server_types"
      }
    },
    "/server_types/{id}": {
      "get": {
        "description": "Gets a specific Server type object.",
        "parameters": [
          {
            "description": "ID of the Server Type.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server Type.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_server_type_response"
                }
              }
            },
            "description": "The `server_type` key in the reply contains a Server type object with this structure"
          }
        },
        "summary": "Get a Server Type",
        "tags": [
          "server_types"
        ],
        "operationId": "get_server_type"
      }
    },
    "/servers": {
      "get": {
        "description": "Returns all existing Server objects",
        "parameters": [
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Can be used multiple times. The response will only contain Server matching the status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "initializing",
                "starting",
                "running",
                "stopping",
                "off",
                "deleting",
                "rebuilding",
                "migrating",
                "unknown"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_servers_response"
                }
              }
            },
            "description": "A paged array of servers",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Get all Servers",
        "tags": [
          "servers"
        ],
        "operationId": "list_servers"
      },
      "post": {
        "description": "Creates a new Server. Returns preliminary information about the Server as well as an Action that covers progress of creation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_server_request"
              }
            }
          },
          "description": "Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).\n\nFor `server_type` you can either use the ID as listed in `/server_types` or its name.\n\nFor `image` you can either use the ID as listed in `/images` or its name.\n\nIf you want to create the Server in a Location, you must set `location` to the ID or name as listed in `/locations`. This is the recommended way. You can be even more specific by setting `datacenter` to the ID or name as listed in `/datacenters`. However we only recommend this if you want to assign a specific Primary IP to the Server which is located in the specified Datacenter.\n\nSome properties like `start_after_create` or `automount` will trigger Actions after the Server is created. Those Actions are listed in the `next_actions` field in the response.\n\nFor accessing your Server we strongly recommend to use SSH keys by passing the respective key IDs in `ssh_keys`. If you do not specify any `ssh_keys` we will generate a root password for you and return it in the response.\n\nPlease note that provided user-data is stored in our systems. While we take measures to protect it we highly recommend that you don’t use it to store passwords or other sensitive information.\n\n#### Call specific error codes\n\n| Code                             | Description                                                |\n|----------------------------------|------------------------------------------------------------|\n| `placement_error`                | An error during the placement occurred                     |\n| `primary_ip_assigned`            | The specified Primary IP is already assigned to a server   |\n| `primary_ip_datacenter_mismatch` | The specified Primary IP is in a different datacenter      |\n| `primary_ip_version_mismatch`    | The specified Primary IP has the wrong IP Version          |\n"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "create_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 1,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  },
                  "next_actions": [
                    {
                      "command": "start_server",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": null,
                      "id": 13,
                      "progress": 0,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "started": "2016-01-30T23:50:00+00:00",
                      "status": "running"
                    }
                  ],
                  "root_password": "YItygq1v3GYjjMomLaKc",
                  "server": {
                    "backup_window": "22-02",
                    "created": "2016-01-30T23:50:00+00:00",
                    "datacenter": {
                      "description": "Falkenstein 1 DC 8",
                      "id": 1,
                      "location": {
                        "city": "Falkenstein",
                        "country": "DE",
                        "description": "Falkenstein DC Park 1",
                        "id": 1,
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "name": "fsn1",
                        "network_zone": "eu-central"
                      },
                      "name": "fsn1-dc8",
                      "server_types": {
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ],
                        "supported": [
                          1,
                          2,
                          3
                        ]
                      }
                    },
                    "id": 42,
                    "image": {
                      "architecture": "x86",
                      "bound_to": null,
                      "created": "2016-01-30T23:50:00+00:00",
                      "created_from": {
                        "id": 1,
                        "name": "Server"
                      },
                      "deleted": null,
                      "deprecated": "2018-02-28T00:00:00+00:00",
                      "description": "Ubuntu 20.04 Standard 64 bit",
                      "disk_size": 10,
                      "id": 4711,
                      "image_size": 2.3,
                      "labels": {
                        "env": "dev"
                      },
                      "name": "ubuntu-20.04",
                      "os_flavor": "ubuntu",
                      "os_version": "20.04",
                      "protection": {
                        "delete": false
                      },
                      "rapid_deploy": false,
                      "status": "available",
                      "type": "snapshot"
                    },
                    "included_traffic": 654321,
                    "ingoing_traffic": 123456,
                    "iso": {
                      "architecture": "x86",
                      "deprecation": {
                        "announced": "2018-02-28T00:00:00+00:00",
                        "unavailable_after": "2018-05-31T00:00:00+00:00"
                      },
                      "description": "FreeBSD 11.0 x64",
                      "id": 4711,
                      "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                      "type": "public"
                    },
                    "labels": {
                      "env": "dev"
                    },
                    "load_balancers": [],
                    "locked": false,
                    "name": "my-server",
                    "outgoing_traffic": 123456,
                    "primary_disk_size": 50,
                    "private_net": [
                      {
                        "alias_ips": [],
                        "ip": "10.0.0.2",
                        "mac_address": "86:00:ff:2a:7d:e1",
                        "network": 4711
                      }
                    ],
                    "protection": {
                      "delete": false,
                      "rebuild": false
                    },
                    "public_net": {
                      "firewalls": [
                        {
                          "id": 38,
                          "status": "applied"
                        }
                      ],
                      "floating_ips": [
                        478
                      ],
                      "ipv4": {
                        "blocked": false,
                        "dns_ptr": "server01.example.com",
                        "ip": "1.2.3.4"
                      },
                      "ipv6": {
                        "blocked": false,
                        "dns_ptr": [
                          {
                            "dns_ptr": "server.example.com",
                            "ip": "2001:db8::1"
                          }
                        ],
                        "ip": "2001:db8::/64"
                      }
                    },
                    "rescue_enabled": false,
                    "server_type": {
                      "architecture": "x86",
                      "cores": 2,
                      "cpu_type": "shared",
                      "deprecated": true,
                      "description": "CPX11",
                      "disk": 40,
                      "id": 1,
                      "included_traffic": null,
                      "memory": 2,
                      "name": "cpx11",
                      "prices": [
                        {
                          "included_traffic": 21990232555520,
                          "location": "fsn1",
                          "price_hourly": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          },
                          "price_monthly": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          },
                          "price_per_tb_traffic": {
                            "gross": "1.1900000000000000",
                            "net": "1.0000000000"
                          }
                        }
                      ],
                      "storage_type": "local"
                    },
                    "status": "initializing",
                    "volumes": []
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_server_response"
                }
              }
            },
            "description": "The `server` key in the reply contains a Server object with this structure"
          }
        },
        "summary": "Create a Server",
        "tags": [
          "servers"
        ],
        "operationId": "create_server"
      }
    },
    "/servers/{id}": {
      "delete": {
        "description": "Deletes a Server. This immediately removes the Server from your account, and it is no longer accessible. Any resources attached to the server (like Volumes, Primary IPs, Floating IPs, Firewalls, Placement Groups) are detached while the server is deleted.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Delete a Server",
        "tags": [
          "servers"
        ],
        "operationId": "delete_server"
      },
      "get": {
        "description": "Returns a specific Server object. The Server must exist inside the Project",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_server_response"
                }
              }
            },
            "description": "The `server` key in the reply contains a Server object with this structure"
          }
        },
        "summary": "Get a Server",
        "tags": [
          "servers"
        ],
        "operationId": "get_server"
      },
      "put": {
        "description": "Updates a Server. You can update a Server’s name and a Server’s labels.\nPlease note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).\nAlso note that when updating labels, the Server’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_server_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_server_response"
                }
              }
            },
            "description": "The `server` key in the reply contains the updated Server"
          }
        },
        "summary": "Update a Server",
        "tags": [
          "servers"
        ],
        "operationId": "replace_server"
      }
    },
    "/servers/{id}/actions": {
      "get": {
        "description": "Returns all Action objects for a Server. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.",
        "parameters": [
          {
            "description": "ID of the Server",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server. Limited to 52 bits to ensure compatability with JSON double precision floats.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer",
              "title": "Server ID"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "start_server",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_server_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "list_actions_for_server"
      }
    },
    "/servers/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific Action object for a Server.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "start_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_server_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "get_action_for_server"
      }
    },
    "/servers/{id}/actions/add_to_placement_group": {
      "post": {
        "description": "Adds a Server to a Placement Group.\n\nServer must be powered off for this command to succeed.\n\n#### Call specific error codes\n\n| Code                          | Description                                                          |\n|-------------------------------|----------------------------------------------------------------------|\n| `server_not_stopped`          | The action requires a stopped server                                 |\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_server_to_placement_group_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "add_to_placement_group",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_server_to_placement_group_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Add a Server to a Placement Group",
        "tags": [
          "servers"
        ],
        "operationId": "add_server_to_placement_group"
      }
    },
    "/servers/{id}/actions/attach_iso": {
      "post": {
        "description": "Attaches an ISO to a Server. The Server will immediately see it as a new disk. An already attached ISO will automatically be detached before the new ISO is attached.\n\nServers with attached ISOs have a modified boot order: They will try to boot from the ISO first before falling back to hard disk.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_iso_to_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "attach_iso",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_iso_to_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Attach an ISO to a Server",
        "tags": [
          "servers"
        ],
        "operationId": "attach_iso_to_server"
      }
    },
    "/servers/{id}/actions/attach_to_network": {
      "post": {
        "description": "Attaches a Server to a network. This will complement the fixed public Server interface by adding an additional ethernet interface to the Server which is connected to the specified network.\n\nThe Server will get an IP auto assigned from a subnet of type `server` in the same `network_zone`.\n\nUsing the `alias_ips` attribute you can also define one or more additional IPs to the Servers. Please note that you will have to configure these IPs by hand on your Server since only the primary IP will be given out by DHCP.\n\n**Call specific error codes**\n\n| Code                             | Description                                                           |\n|----------------------------------|-----------------------------------------------------------------------|\n| `server_already_attached`        | The server is already attached to the network                         |\n| `ip_not_available`               | The provided Network IP is not available                              |\n| `no_subnet_available`            | No Subnet or IP is available for the Server within the network        |\n| `networks_overlap`               | The network IP range overlaps with one of the server networks         |\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_server_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "attach_to_network",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_server_to_network_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Attach a Server to a Network",
        "tags": [
          "servers"
        ],
        "operationId": "attach_server_to_network"
      }
    },
    "/servers/{id}/actions/change_alias_ips": {
      "post": {
        "description": "Changes the alias IPs of an already attached Network. Note that the existing aliases for the specified Network will be replaced with these provided in the request body. So if you want to add an alias IP, you have to provide the existing ones from the Network plus the new alias IP in the request body.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_alias_ips_of_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_alias_ips",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_alias_ips_of_network_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Change alias IPs of a Network",
        "tags": [
          "servers"
        ],
        "operationId": "change_alias_ips_of_network"
      }
    },
    "/servers/{id}/actions/change_dns_ptr": {
      "post": {
        "description": "Changes the hostname that will appear when getting the hostname belonging to the primary IPs (IPv4 and IPv6) of this Server.\n\nFloating IPs assigned to the Server are not affected by this.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_server_request"
              }
            }
          },
          "description": "Select the IP address for which to change the DNS entry by passing `ip`. It can be either IPv4 or IPv6. The target hostname is set by passing `dns_ptr`."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_dns_ptr",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Change reverse DNS entry for this Server",
        "tags": [
          "servers"
        ],
        "operationId": "change_reverse_dns_entry_for_this_server"
      }
    },
    "/servers/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection configuration of the Server.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_server_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_server_protection_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Change Server Protection",
        "tags": [
          "servers"
        ],
        "operationId": "change_server_protection"
      }
    },
    "/servers/{id}/actions/change_type": {
      "post": {
        "description": "Changes the type (Cores, RAM and disk sizes) of a Server.\n\nServer must be powered off for this command to succeed.\n\nThis copies the content of its disk, and starts it again.\n\nYou can only migrate to Server types with the same `storage_type` and equal or bigger disks. Shrinking disks is not possible as it might destroy data.\n\nIf the disk gets upgraded, the Server type can not be downgraded any more. If you plan to downgrade the Server type, set `upgrade_disk` to `false`.\n\n#### Call specific error codes\n\n| Code                          | Description                                                          |\n|-------------------------------|----------------------------------------------------------------------|\n| `invalid_server_type`         | The server type does not fit for the given server or is deprecated   |\n| `server_not_stopped`          | The action requires a stopped server                                 |\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_type_of_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_server_type",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_type_of_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Change the Type of a Server",
        "tags": [
          "servers"
        ],
        "operationId": "change_type_of_server"
      }
    },
    "/servers/{id}/actions/create_image": {
      "post": {
        "description": "Creates an Image (snapshot) from a Server by copying the contents of its disks. This creates a snapshot of the current state of the disk and copies it into an Image. If the Server is currently running you must make sure that its disk content is consistent. Otherwise, the created Image may not be readable.\n\nTo make sure disk content is consistent, we recommend to shut down the Server prior to creating an Image.\n\nYou can either create a `backup` Image that is bound to the Server and therefore will be deleted when the Server is deleted, or you can create a `snapshot` Image which is completely independent of the Server it was created from and will survive Server deletion. Backup Images are only available when the backup option is enabled for the Server. Snapshot Images are billed on a per GB basis.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_image_from_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "create_image",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  },
                  "image": {
                    "architecture": "x86",
                    "bound_to": null,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "deleted": null,
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "description": "my image",
                    "disk_size": 10,
                    "id": 4711,
                    "image_size": 2.3,
                    "labels": {
                      "env": "dev"
                    },
                    "name": null,
                    "os_flavor": "ubuntu",
                    "os_version": "20.04",
                    "protection": {
                      "delete": false
                    },
                    "rapid_deploy": false,
                    "status": "creating",
                    "type": "snapshot"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_image_from_server_response"
                }
              }
            },
            "description": "The `image` key in the reply contains an the created Image, which is an object with this structure\n\nThe `action` key in the reply contains an Action object with this structure\n"
          }
        },
        "summary": "Create Image from a Server",
        "tags": [
          "servers"
        ],
        "operationId": "create_image_from_server"
      }
    },
    "/servers/{id}/actions/detach_from_network": {
      "post": {
        "description": "Detaches a Server from a network. The interface for this network will vanish.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detach_server_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "detach_from_network",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_server_from_network_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Detach a Server from a Network",
        "tags": [
          "servers"
        ],
        "operationId": "detach_server_from_network"
      }
    },
    "/servers/{id}/actions/detach_iso": {
      "post": {
        "description": "Detaches an ISO from a Server. In case no ISO Image is attached to the Server, the status of the returned Action is immediately set to `success`",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "detach_iso",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_iso_from_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Detach an ISO from a Server",
        "tags": [
          "servers"
        ],
        "operationId": "detach_iso_from_server"
      }
    },
    "/servers/{id}/actions/disable_backup": {
      "post": {
        "description": "Disables the automatic backup option and deletes all existing Backups for a Server. No more additional charges for backups will be made.\n\nCaution: This immediately removes all existing backups for the Server!\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "disable_backup",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/disable_backups_for_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Disable Backups for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "disable_backups_for_server"
      }
    },
    "/servers/{id}/actions/disable_rescue": {
      "post": {
        "description": "Disables the Hetzner Rescue System for a Server. This makes a Server start from its disks on next reboot.\n\nRescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.\n\nDisabling rescue mode will not reboot your Server — you will have to do this yourself.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "disable_rescue",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/disable_rescue_mode_for_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Disable Rescue Mode for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "disable_rescue_mode_for_server"
      }
    },
    "/servers/{id}/actions/enable_backup": {
      "post": {
        "description": "Enables and configures the automatic daily backup option for the Server. Enabling automatic backups will increase the price of the Server by 20%. In return, you will get seven slots where Images of type backup can be stored.\n\nBackups are automatically created daily.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "enable_backup",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/enable_and_configure_backups_for_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Enable and Configure Backups for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "enable_and_configure_backups_for_server"
      }
    },
    "/servers/{id}/actions/enable_rescue": {
      "post": {
        "description": "Enable the Hetzner Rescue System for this Server. The next time a Server with enabled rescue mode boots it will start a special minimal Linux distribution designed for repair and reinstall.\n\nIn case a Server cannot boot on its own you can use this to access a Server’s disks.\n\nRescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.\n\nEnabling rescue mode will not [reboot](https://docs.hetzner.cloud/#server-actions-soft-reboot-a-server) your Server — you will have to do this yourself.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enable_rescue_mode_for_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "enable_rescue",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  },
                  "root_password": "zCWbFhnu950dUTko5f40"
                },
                "schema": {
                  "$ref": "#/components/schemas/enable_rescue_mode_for_server_response"
                }
              }
            },
            "description": "The `root_password` key in the reply contains the root password that can be used to access the booted rescue system.\n\nThe `action` key in the reply contains an Action object with this structure\n"
          }
        },
        "summary": "Enable Rescue Mode for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "enable_rescue_mode_for_server"
      }
    },
    "/servers/{id}/actions/poweroff": {
      "post": {
        "description": "Cuts power to the Server. This forcefully stops it without giving the Server operating system time to gracefully stop. May lead to data loss, equivalent to pulling the power cord. Power off should only be used when shutdown does not work.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "stop_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/power_off_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Power off a Server",
        "tags": [
          "servers"
        ],
        "operationId": "power_off_server"
      }
    },
    "/servers/{id}/actions/poweron": {
      "post": {
        "description": "Starts a Server by turning its power on.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "start_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/power_on_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Power on a Server",
        "tags": [
          "servers"
        ],
        "operationId": "power_on_server"
      }
    },
    "/servers/{id}/actions/reboot": {
      "post": {
        "description": "Reboots a Server gracefully by sending an ACPI request. The Server operating system must support ACPI and react to the request, otherwise the Server will not reboot.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "reboot_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/soft_reboot_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Soft-reboot a Server",
        "tags": [
          "servers"
        ],
        "operationId": "soft_reboot_server"
      }
    },
    "/servers/{id}/actions/rebuild": {
      "post": {
        "description": "Rebuilds a Server overwriting its disk with the content of an Image, thereby **destroying all data** on the target Server\n\nThe Image can either be one you have created earlier (`backup` or `snapshot` Image) or it can be a completely fresh `system` Image provided by us. You can get a list of all available Images with `GET /images`.\n\nYour Server will automatically be powered off before the rebuild command executes.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rebuild_server_from_image_request"
              }
            }
          },
          "description": "To select which Image to rebuild from you can either pass an ID or a name as the `image` argument. Passing a name only works for `system` Images since the other Image types do not have a name set."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "rebuild_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  },
                  "root_password": null
                },
                "schema": {
                  "$ref": "#/components/schemas/rebuild_server_from_image_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Rebuild a Server from an Image",
        "tags": [
          "servers"
        ],
        "operationId": "rebuild_server_from_image"
      }
    },
    "/servers/{id}/actions/remove_from_placement_group": {
      "post": {
        "description": "Removes a Server from a Placement Group.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "remove_from_placement_group",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/remove_from_placement_group_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Remove from Placement Group",
        "tags": [
          "servers"
        ],
        "operationId": "remove_from_placement_group"
      }
    },
    "/servers/{id}/actions/request_console": {
      "post": {
        "description": "Requests credentials for remote access via VNC over websocket to keyboard, monitor, and mouse for a Server. The provided URL is valid for 1 minute, after this period a new url needs to be created to connect to the Server. How long the connection is open after the initial connect is not subject to this timeout.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "request_console",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  },
                  "password": "9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x",
                  "wss_url": "wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c"
                },
                "schema": {
                  "$ref": "#/components/schemas/request_console_for_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Request Console for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "request_console_for_server"
      }
    },
    "/servers/{id}/actions/reset": {
      "post": {
        "description": "Cuts power to a Server and starts it again. This forcefully stops it without giving the Server operating system time to gracefully stop. This may lead to data loss, it’s equivalent to pulling the power cord and plugging it in again. Reset should only be used when reboot does not work.",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "reset_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/reset_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Reset a Server",
        "tags": [
          "servers"
        ],
        "operationId": "reset_server"
      }
    },
    "/servers/{id}/actions/reset_password": {
      "post": {
        "description": "Resets the root password. Only works for Linux systems that are running the qemu guest agent. Server must be powered on (status `running`) in order for this operation to succeed.\n\nThis will generate a new password for this Server and return it.\n\nIf this does not succeed you can use the rescue system to netboot the Server and manually change your Server password by hand.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "reset_password",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  },
                  "root_password": "zCWbFhnu950dUTko5f40"
                },
                "schema": {
                  "$ref": "#/components/schemas/reset_root_password_of_server_response"
                }
              }
            },
            "description": "The `root_password` key in the reply contains the new root password that will be active if the Action succeeds.\n\nThe `action` key in the reply contains an Action object with this structure:\n"
          }
        },
        "summary": "Reset root Password of a Server",
        "tags": [
          "servers"
        ],
        "operationId": "reset_root_password_of_server"
      }
    },
    "/servers/{id}/actions/shutdown": {
      "post": {
        "description": "Shuts down a Server gracefully by sending an ACPI shutdown request. The Server operating system must support ACPI\nand react to the request, otherwise the Server will not shut down. Please note that the `action` status in this case\nonly reflects whether the action was sent to the server. It does not mean that the server actually shut down\nsuccessfully. If you need to ensure that the server is off, use the `poweroff` action\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "shutdown_server",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/shutdown_server_response"
                }
              }
            },
            "description": "The `action` key in the reply contains an Action object with this structure"
          }
        },
        "summary": "Shutdown a Server",
        "tags": [
          "servers"
        ],
        "operationId": "shutdown_server"
      }
    },
    "/servers/{id}/metrics": {
      "get": {
        "description": "Get Metrics for specified Server.\n\nYou must specify the type of metric to get: cpu, disk or network. You can also specify more than one type by comma separation, e.g. cpu,disk.\n\nDepending on the type you will get different time series data\n\n| Type    | Timeseries              | Unit      | Description                                          |\n|---------|-------------------------|-----------|------------------------------------------------------|\n| cpu     | cpu                     | percent   | Percent CPU usage                                    |\n| disk    | disk.0.iops.read        | iop/s     | Number of read IO operations per second              |\n|         | disk.0.iops.write       | iop/s     | Number of write IO operations per second             |\n|         | disk.0.bandwidth.read   | bytes/s   | Bytes read per second                                |\n|         | disk.0.bandwidth.write  | bytes/s   | Bytes written per second                             |\n| network | network.0.pps.in        | packets/s | Public Network interface packets per second received |\n|         | network.0.pps.out       | packets/s | Public Network interface packets per second sent     |\n|         | network.0.bandwidth.in  | bytes/s   | Public Network interface bytes/s received            |\n|         | network.0.bandwidth.out | bytes/s   | Public Network interface bytes/s sent                |\n\nMetrics are available for the last 30 days only.\n\nIf you do not provide the step argument we will automatically adjust it so that a maximum of 200 samples are returned.\n\nWe limit the number of samples returned to a maximum of 500 and will adjust the step parameter accordingly.\n",
        "parameters": [
          {
            "description": "ID of the Server.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Server.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Type of metrics to get",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "cpu",
                "disk",
                "network"
              ],
              "type": "string"
            }
          },
          {
            "description": "Start of period to get Metrics for (in ISO-8601 format)",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End of period to get Metrics for (in ISO-8601 format)",
            "in": "query",
            "name": "end",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resolution of results in seconds",
            "in": "query",
            "name": "step",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_metrics_for_server_response"
                }
              }
            },
            "description": "The `metrics` key in the reply contains a metrics object with this structure"
          }
        },
        "summary": "Get Metrics for a Server",
        "tags": [
          "servers"
        ],
        "operationId": "get_metrics_for_server"
      }
    },
    "/servers/actions": {
      "get": {
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "servers"
        ],
        "operationId": "list_server_actions"
      }
    },
    "/servers/actions/{id}": {
      "get": {
        "description": "Returns a specific Action object.",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action",
        "tags": [
          "servers"
        ],
        "operationId": "get_server_action"
      }
    },
    "/ssh_keys": {
      "get": {
        "description": "Returns all SSH key objects.",
        "parameters": [
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.",
            "in": "query",
            "name": "fingerprint",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_ssh_keys_response"
                }
              }
            },
            "description": "The `ssh_keys` key in the reply contains an array of SSH key objects with this structure"
          }
        },
        "summary": "Get all SSH keys",
        "tags": [
          "ssh_keys"
        ],
        "operationId": "list_ssh_keys"
      },
      "post": {
        "description": "Creates a new SSH key with the given `name` and `public_key`. Once an SSH key is created, it can be used in other calls such as creating Servers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_ssh_key_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_ssh_key_response"
                }
              }
            },
            "description": "The `ssh_key` key in the reply contains the object that was just created"
          }
        },
        "summary": "Create an SSH key",
        "tags": [
          "ssh_keys"
        ],
        "operationId": "create_ssh_key"
      }
    },
    "/ssh_keys/{id}": {
      "delete": {
        "description": "Deletes an SSH key. It cannot be used anymore.",
        "parameters": [
          {
            "description": "ID of the SSH Key.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the SSH Key.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SSH key deleted"
          }
        },
        "summary": "Delete an SSH key",
        "tags": [
          "ssh_keys"
        ],
        "operationId": "delete_ssh_key"
      },
      "get": {
        "description": "Returns a specific SSH key object.",
        "parameters": [
          {
            "description": "ID of the SSH Key.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the SSH Key.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_ssh_key_response"
                }
              }
            },
            "description": "The `ssh_key` key in the reply contains an SSH key object with this structure"
          }
        },
        "summary": "Get a SSH key",
        "tags": [
          "ssh_keys"
        ],
        "operationId": "get_ssh_key"
      },
      "put": {
        "description": "Updates an SSH key. You can update an SSH key name and an SSH key labels.\n\nPlease note that when updating labels, the SSH key current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n",
        "parameters": [
          {
            "description": "ID of the SSH Key.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the SSH Key.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_ssh_key_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "ssh_key": {
                    "created": "2016-01-30T23:50:00+00:00",
                    "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                    "id": 2323,
                    "labels": {
                      "labelkey": "value"
                    },
                    "name": "My ssh key",
                    "public_key": "ssh-rsa AAAjjk76kgf...Xt"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_ssh_key_response"
                }
              }
            },
            "description": "The `ssh_key` key in the reply contains the modified SSH key object with the new description"
          }
        },
        "summary": "Update an SSH key",
        "tags": [
          "ssh_keys"
        ],
        "operationId": "replace_ssh_key"
      }
    },
    "/volumes": {
      "get": {
        "description": "Gets all existing Volumes that you have available.",
        "parameters": [
          {
            "description": "Can be used multiple times. The response will only contain Volumes matching the status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "available",
                "creating"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort resources by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter resources by their name. The response will only contain the resources\nmatching the specified name.\n",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter resources by labels. The response will only contain resources matching the\nlabel selector. For more information, see \"[Label Selector](#label-selector)\".\n",
            "in": "query",
            "name": "label_selector",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_volumes_response"
                }
              }
            },
            "description": "The `volumes` key contains a list of volumes"
          }
        },
        "summary": "Get all Volumes",
        "tags": [
          "volumes"
        ],
        "operationId": "list_volumes"
      },
      "post": {
        "description": "Creates a new Volume attached to a Server. If you want to create a Volume that is not attached to a Server, you need to provide the `location` key instead of `server`. This can be either the ID or the name of the Location this Volume will be created in. Note that a Volume can be attached to a Server only in the same Location as the Volume itself.\n\nSpecifying the Server during Volume creation will automatically attach the Volume to that Server after it has been initialized. In that case, the `next_actions` key in the response is an array which contains a single `attach_volume` action.\n\nThe minimum Volume size is 10GB and the maximum size is 10TB (10240GB).\n\nA volume’s name can consist of alphanumeric characters, dashes, underscores, and dots, but has to start and end with an alphanumeric character. The total length is limited to 64 characters. Volume names must be unique per Project.\n\n#### Call specific error codes\n\n| Code                                | Description                                         |\n|-------------------------------------|-----------------------------------------------------|\n| `no_space_left_in_location`         | There is no volume space left in the given location |\n",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "automount": false,
                "format": "xfs",
                "labels": {
                  "labelkey": "value"
                },
                "location": "nbg1",
                "name": "test-database",
                "size": 42
              },
              "schema": {
                "$ref": "#/components/schemas/create_volume_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "create_volume",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  },
                  "next_actions": [
                    {
                      "command": "attach_volume",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": null,
                      "id": 13,
                      "progress": 0,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 554,
                          "type": "volume"
                        }
                      ],
                      "started": "2016-01-30T23:50:00+00:00",
                      "status": "running"
                    }
                  ],
                  "volume": {
                    "created": "2016-01-30T23:50:11+00:00",
                    "format": "xfs",
                    "id": 4711,
                    "labels": {
                      "env": "dev"
                    },
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "location": {
                      "city": "Falkenstein",
                      "country": "DE",
                      "description": "Falkenstein DC Park 1",
                      "id": 1,
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "name": "fsn1",
                      "network_zone": "eu-central"
                    },
                    "name": "database-storage",
                    "protection": {
                      "delete": false
                    },
                    "server": 12,
                    "size": 42,
                    "status": "available"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_volume_response"
                }
              }
            },
            "description": "The `volume` key contains the Volume that was just created\n\nThe `action` key contains the Action tracking Volume creation\n"
          }
        },
        "summary": "Create a Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "create_volume"
      }
    },
    "/volumes/{id}": {
      "delete": {
        "description": "Deletes a volume. All Volume data is irreversibly destroyed. The Volume must not be attached to a Server and it must not have delete protection enabled.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Volume deleted"
          }
        },
        "summary": "Delete a Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "delete_volume"
      },
      "get": {
        "description": "Gets a specific Volume object.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_volume_response"
                }
              }
            },
            "description": "The `volume` key contains the volume"
          }
        },
        "summary": "Get a Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "get_volume"
      },
      "put": {
        "description": "Updates the Volume properties.\n\nNote that when updating labels, the volume’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_volume_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "volume": {
                    "created": "2016-01-30T23:50:11+00:00",
                    "format": "xfs",
                    "id": 4711,
                    "labels": {
                      "labelkey": "value"
                    },
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "location": {
                      "city": "Falkenstein",
                      "country": "DE",
                      "description": "Falkenstein DC Park 1",
                      "id": 1,
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "name": "fsn1",
                      "network_zone": "eu-central"
                    },
                    "name": "database-storage",
                    "protection": {
                      "delete": false
                    },
                    "server": 12,
                    "size": 42,
                    "status": "available"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_volume_response"
                }
              }
            },
            "description": "The `volume` key contains the updated volume"
          }
        },
        "summary": "Update a Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "replace_volume"
      }
    },
    "/volumes/{id}/actions": {
      "get": {
        "description": "Returns all Action objects for a Volume. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "actions": [
                    {
                      "command": "attach_volume",
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      },
                      "finished": "2016-01-30T23:56:00+00:00",
                      "id": 13,
                      "progress": 100,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 13,
                          "type": "volume"
                        }
                      ],
                      "started": "2016-01-30T23:55:00+00:00",
                      "status": "success"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "last_page": 1,
                      "next_page": null,
                      "page": 1,
                      "per_page": 25,
                      "previous_page": null,
                      "total_entries": 21
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_volume_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions for a Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "list_actions_for_volume"
      }
    },
    "/volumes/{id}/actions/{action_id}": {
      "get": {
        "description": "Returns a specific Action for a Volume.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "ID of the Action.",
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "attach_volume",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_volume_response"
                }
              }
            },
            "description": "The `action` key contains the Volume Action"
          }
        },
        "summary": "Get an Action for a Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "get_action_for_volume"
      }
    },
    "/volumes/{id}/actions/attach": {
      "post": {
        "description": "Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_volume_to_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "attach_volume",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 43,
                        "type": "server"
                      },
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_volume_to_server_response"
                }
              }
            },
            "description": "The `action` key contains the `attach_volume` Action"
          }
        },
        "summary": "Attach Volume to a Server",
        "tags": [
          "volumes"
        ],
        "operationId": "attach_volume_to_server"
      }
    },
    "/volumes/{id}/actions/change_protection": {
      "post": {
        "description": "Changes the protection configuration of a Volume.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_volume_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "change_protection",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": "2016-01-30T23:56:00+00:00",
                    "id": 13,
                    "progress": 100,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "started": "2016-01-30T23:55:00+00:00",
                    "status": "success"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_volume_protection_response"
                }
              }
            },
            "description": "The `action` key contains the `change_protection` Action"
          }
        },
        "summary": "Change Volume Protection",
        "tags": [
          "volumes"
        ],
        "operationId": "change_volume_protection"
      }
    },
    "/volumes/{id}/actions/detach": {
      "post": {
        "description": "Detaches a Volume from the Server it’s attached to. You may attach it to a Server again at a later time.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "detach_volume",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_volume_response"
                }
              }
            },
            "description": "The `action` key contains the `detach_volume` Action"
          }
        },
        "summary": "Detach Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "detach_volume"
      }
    },
    "/volumes/{id}/actions/resize": {
      "post": {
        "description": "Changes the size of a Volume. Note that downsizing a Volume is not possible.",
        "parameters": [
          {
            "description": "ID of the Volume.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Volume.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resize_volume_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "command": "resize_volume",
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    },
                    "finished": null,
                    "id": 13,
                    "progress": 0,
                    "resources": [
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "started": "2016-01-30T23:50:00+00:00",
                    "status": "running"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/resize_volume_response"
                }
              }
            },
            "description": "The `action` key contains the `resize_volume` Action"
          }
        },
        "summary": "Resize Volume",
        "tags": [
          "volumes"
        ],
        "operationId": "resize_volume"
      }
    },
    "/volumes/actions": {
      "get": {
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.",
        "parameters": [
          {
            "description": "Filter the actions by ID. Can be used multiple times. The response will only contain\nactions matching the specified IDs.\n",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          },
          {
            "description": "Sort actions by field and direction. Can be used multiple times. For more\ninformation, see \"[Sorting](#sorting)\".\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter the actions by status. Can be used multiple times. The response will only\ncontain actions matching the specified statuses.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "description": "Status of the Action.",
              "enum": [
                "running",
                "success",
                "error"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number to return. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 25,
              "example": 25,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            },
            "description": "The `actions` key contains a list of Actions"
          }
        },
        "summary": "Get all Actions",
        "tags": [
          "volumes"
        ],
        "operationId": "list_volume_actions"
      }
    },
    "/volumes/actions/{id}": {
      "get": {
        "description": "Returns a specific Action object.",
        "parameters": [
          {
            "description": "ID of the Action",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "ID of the Action.",
              "example": 42,
              "format": "int64",
              "maximum": 9007199254740991,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            },
            "description": "The `action` key in the reply has this structure"
          }
        },
        "summary": "Get an Action",
        "tags": [
          "volumes"
        ],
        "operationId": "get_volume_action"
      }
    }
  },
  "security": [
    {
      "APIToken": []
    }
  ]
}